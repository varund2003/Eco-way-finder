// // Load the Google map plugin
// document.write('<script src="//maps.googleapis.com/maps/api/js?key=AIzaSyA5S8PdFuC6EyHKP0OyszxfgTDQ3-cMZR4&amp;libraries=places&callback=gMapsReady"><\/script>');
//
//
//
// // This is called when the Google Maps JS is succesfully loaded
// function gMapsReady() { // console.log('gMapsReady');
//
//     // Do we have jQuery?
//     if (typeof jQuery === 'undefined') {
//         // Choose which version of jQuery
//         if('querySelector' in document && 'localStorage' in window && 'addEventListener' in window) {
//             // Add jQuery 2.0+
//             document.write('<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js?callback=jQueryReady"><\/script>');
//         } else {
//             // Add jQuery 1.9.0+
//             document.write('<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js?callback=jQueryReady"><\/script>');
//         }
//
//     // Otherwise if we already have jQuery
//     } else {
//         jQueryReady();
//     }
// };
//
//
//function jQueryReady() { // console.log('jQueryReady');
//    var $ = window.jQuery;
//}




;(function($) {

	// Where is ergMap hosted?
	var absolutePathToErgMap = '//bidwidget.uk/3/ergmap/';
	// var absolutePathToErgMap = '/3/ergmap/';
	// var absolutePathToErgMap = 'https://map.londonair.com/';
	$(document).ready(function () {
		$('.absolutePathToErgMap').html(absolutePathToErgMap);
	});

	// A unique incremented key for every single instantiation of $.ergMap()
	var ergMapKey = 0;



	// ergMap jQuery plugin
	// A jQuery plugin to produce air pollution Google maps in London using
	// data from Environmental Research Group, King's College London

	// Pattern to individually initialise multiple complete plugin instances
	// (so that each can have its own methods) http://jsfiddle.net/Aq7Y4
	$.fn.ergMap = function(methodOrOptions) {

		var method = (typeof methodOrOptions === 'string') ? methodOrOptions : undefined;

		if (method) {
			var customPlugins = [];

			function getCustomPlugin() {
				var $el          = $(this);
				var customPlugin = $el.data('customPlugin');

				customPlugins.push(customPlugin);
			}

			this.each(getCustomPlugin);

			var args    = (arguments.length > 1) ? Array.prototype.slice.call(arguments, 1) : undefined;
			var results = [];

			function applyMethod(index) {
				var customPlugin = customPlugins[index];

				if (!customPlugin) {
					console.warn('$.ergMap not instantiated yet');
					console.info(this);
					results.push(undefined);
					return;
				}

				if (typeof customPlugin[method] === 'function') {
					var result = customPlugin[method].apply(customPlugin, args);
					results.push(result);
				} else {
					console.warn('Method \'' + method + '\' not defined in $.customPlugin');
				}
			}

			this.each(applyMethod);

			return (results.length > 1) ? results : results[0];
		} else {
			var options = (typeof methodOrOptions === 'object') ? methodOrOptions : undefined;

			function init() {
				var $el          = $(this);
				var customPlugin = new ErgMapPlugin($el, options);
				
				$el.data('customPlugin', customPlugin);
			}

			return this.each(init);
		}
	};



	var ErgMapPlugin = function($el, options) {



		// Methods (placeholders that are all overwritten if initialised)
		this.options       = function(options) { return options; }
		this.setOpacity    = function(opacity) { return $el; }
		this.geoDetectFrom = function()        { return $el; }
		this.refresh       = function()        { return $el; }



		// Defaults to be overridden by the user
		var defaults = {
			// The map type, choose: monitoring-stations, hourly-combined, hourly-no2,
			// hourly-o3, hourly-pm10, hourly-pm25, annual-no2, annual-o3, annual-pm10, annual-pm25
			overlay: 'hourly-combined-no-o3',

			// Lat lng and zoom (these default to zoomed-out London)
			lat:  51.4979368252699,
			lng:  -0.13188983460997505,
			zoom: 10,

			// Theme for the map, choose: greyscale, silver, night
			// Additional theme can be added to internalSettings.private.themes
			theme: 'silver',

			// Width and height
			// You can set these in CSS if you prefer.
			// This is primarily to override the default 0 height of an element
			width:  undefined,
			height: undefined,

			// kmllayer - web-based URL (can't be local) to a kmllayer to add
			// Accepts a string to a single URL if using the data-attribute API
			// or if using the JSON API will accept an array of URLs
			kmllayer: undefined,

			// Style the InfoWindow
			infowindowbackgroundcolour: undefined,
			infowindowtextcolour:       undefined,

			// Enable routing
			routing: false,

			// Pass jQuery selectors to override the default routing UI
			routinginputfromselector: undefined, // must be a text input
			routinginputtoselector:   undefined, // must be a text input
			routingtravelmodewrap:    undefined, // must contain a select or radios

			// Enable the opacity slider
			opacityslider: false,



			// Lesser used settings - usually just keep these as their defaults
			// ################################################################

			// console.log() the lat, lng, and zoom after moving/zooming the map
			consoleloglatlngzoom: false,

			// Show the banding strip
			bandingstrip: true,

			// 20 metre model opacity
			opacity: 0.5,

			// Whether to use large or small markers with overlay:'monitoring-stations'
			monitoringmarkerslarge: false,

			// Enable/disable styling on the InfoWindows
			infowindowstyle: true,

			// Allow the mouse scrollwheel zoom the map
			scrollwheelzoom: false,

			// Whether to show the map type controls (i.e. Map, Satellite, etc.)
			typecontrols: false,

			// Show the zoom UI
			zoomcontrol: true,

			// Google branded
			googlebrand: false,

			// Add a ICL credit
			iclcredit: true,

			// Fade out any 20 metre overlay whilst dragging the map
			fadeoutoverlayondrag: true,
		};

		// Private settings, these cannot be overridden by the user
		// (as they're reapplied after any JSON or data-attr options are imported)
		var internalSettings = {
			private: {
				width: '100%',
				height: '300px',
				infowindowbackgroundcolour: '#fff',
				infowindowtextcolour: '#000',
				infowindowrouting: {
					high: '#d80000',
					middle: '#fe994d',
					low: '#66a33e',
					text: '#fff',
					width: '135px',
				},
				themes: {
					// Andrew's original theme
					greyscale: [ { featureType: "all", stylers: [ { saturation: -80 } ] } ],
					// Silver theme
					silver: [ { "elementType": "geometry", "stylers": [ { "color": "#f5f5f5" } ] }, { "elementType": "labels.icon", "stylers": [ { "visibility": "off" } ] }, { "elementType": "labels.text.fill", "stylers": [ { "color": "#616161" } ] }, { "elementType": "labels.text.stroke", "stylers": [ { "color": "#f5f5f5" } ] }, { "featureType": "administrative.land_parcel", "elementType": "labels.text.fill", "stylers": [ { "color": "#bdbdbd" } ] }, { "featureType": "poi", "elementType": "geometry", "stylers": [ { "color": "#eeeeee" } ] }, { "featureType": "poi", "elementType": "labels.text.fill", "stylers": [ { "color": "#757575" } ] }, { "featureType": "poi.park", "elementType": "geometry", "stylers": [ { "color": "#e5e5e5" } ] }, { "featureType": "poi.park", "elementType": "labels.text.fill", "stylers": [ { "color": "#9e9e9e" } ] }, { "featureType": "road", "elementType": "geometry", "stylers": [ { "color": "#ffffff" } ] }, { "featureType": "road.arterial", "elementType": "labels.text.fill", "stylers": [ { "color": "#757575" } ] }, { "featureType": "road.highway", "elementType": "geometry", "stylers": [ { "color": "#dadada" } ] }, { "featureType": "road.highway", "elementType": "labels.text.fill", "stylers": [ { "color": "#616161" } ] }, { "featureType": "road.local", "elementType": "labels.text.fill", "stylers": [ { "color": "#9e9e9e" } ] }, { "featureType": "transit.line", "elementType": "geometry", "stylers": [ { "color": "#e5e5e5" } ] }, { "featureType": "transit.station", "elementType": "geometry", "stylers": [ { "color": "#eeeeee" } ] }, { "featureType": "water", "elementType": "geometry", "stylers": [ { "color": "#c9c9c9" } ] }, { "featureType": "water", "elementType": "labels.text.fill", "stylers": [ { "color": "#9e9e9e" } ] } ],
					// Night theme
					night: [ { "elementType": "geometry", "stylers": [ { "color": "#212121" } ] }, { "elementType": "labels.icon", "stylers": [ { "visibility": "off" } ] }, { "elementType": "labels.text.fill", "stylers": [ { "color": "#757575" } ] }, { "elementType": "labels.text.stroke", "stylers": [ { "color": "#212121" } ] }, { "featureType": "administrative", "elementType": "geometry", "stylers": [ { "color": "#757575" } ] }, { "featureType": "administrative.country", "elementType": "labels.text.fill", "stylers": [ { "color": "#9e9e9e" } ] }, { "featureType": "administrative.land_parcel", "stylers": [ { "visibility": "off" } ] }, { "featureType": "administrative.locality", "elementType": "labels.text.fill", "stylers": [ { "color": "#bdbdbd" } ] }, { "featureType": "poi", "elementType": "labels.text.fill", "stylers": [ { "color": "#757575" } ] }, { "featureType": "poi.park", "elementType": "geometry", "stylers": [ { "color": "#181818" } ] }, { "featureType": "poi.park", "elementType": "labels.text.fill", "stylers": [ { "color": "#616161" } ] }, { "featureType": "poi.park", "elementType": "labels.text.stroke", "stylers": [ { "color": "#1b1b1b" } ] }, { "featureType": "road", "elementType": "geometry.fill", "stylers": [ { "color": "#2c2c2c" } ] }, { "featureType": "road", "elementType": "labels.text.fill", "stylers": [ { "color": "#8a8a8a" } ] }, { "featureType": "road.arterial", "elementType": "geometry", "stylers": [ { "color": "#373737" } ] }, { "featureType": "road.highway", "elementType": "geometry", "stylers": [ { "color": "#3c3c3c" } ] }, { "featureType": "road.highway.controlled_access", "elementType": "geometry", "stylers": [ { "color": "#4e4e4e" } ] }, { "featureType": "road.local", "elementType": "labels.text.fill", "stylers": [ { "color": "#616161" } ] }, { "featureType": "transit", "elementType": "labels.text.fill", "stylers": [ { "color": "#757575" } ] }, { "featureType": "water", "elementType": "geometry", "stylers": [ { "color": "#000000" } ] }, { "featureType": "water", "elementType": "labels.text.fill", "stylers": [ { "color": "#3d3d3d" } ] } ],
				}
			}
		};

		// Nice reference to the map DOM node, jQuery wrapped
		var $m = $el; // $($el);

		// Options object
		// Override defaults with any options passed in
		// Also ensure that users cannot override internalSettings by re-setting them anew
		var o = $.extend(true, {}, defaults, $m.data(), options, internalSettings);
		// console.log(o);

		// Method to override (and initialise) options
		this.options = function(newOptions) {
			if (typeof newOptions === 'object') {
				o = $.extend(true, {}, o, newOptions, internalSettings);
			}
			return o;
		};



		// If the width is currently 0, set it to the private default
		if (o.width === undefined && $m.width() === 0) {
			$m.width(o.private.width);
		// Otherwise use options passed in
		} else {
			$m.width(o.width);
		}

		// If the height is currently 0, set it to the private default
		if (o.height === undefined && $m.height() === 0) {
			$m.height(o.private.height);
		// Otherwise use options passed in
		} else {
			$m.height(o.height);
		}



		// Default the overlay to current nowcast (and init var)
		// http://webgis.erg.ic.ac.uk/ergwebsvr/rest/services/
		var pollutionOverlayType = false;
		switch (o.overlay.toLowerCase()) {
			case 'hourly-combined-no-o3': pollutionOverlayType = 'CombinedNoO3_Now'; break;
			case 'hourly-combined':       pollutionOverlayType = 'Combined_Now';     break;
			case 'hourly-no2':            pollutionOverlayType = 'NO2_Now';          break;
			case 'hourly-o3':             pollutionOverlayType = 'O3_Now';           break;
			case 'hourly-pm10':           pollutionOverlayType = 'PM10_Now';         break;
			case 'hourly-pm25':           pollutionOverlayType = 'PM25_Now';         break;
			case 'annual-no2':            pollutionOverlayType = 'NO2_2013';         break;
			case 'annual-o3':             pollutionOverlayType = 'O3_2013';          break;
			case 'annual-pm10':           pollutionOverlayType = 'PM10_2013';        break;
			case 'annual-pm25':           pollutionOverlayType = 'PM25_2013';        break;
			case 'monitoring-stations':   pollutionOverlayType = 'NONE_USE_BADGES';  break;
			case 'none':                  pollutionOverlayType = 'NONE';             break;
		}
		// Add the pollution type as a class, used to show the correct banding strip
		$m.addClass(o.overlay.toLowerCase());



		// Should we show the type controls (i.e. the Map + Satellite buttons)
		if (o.typecontrols) {
			o.private.mapTypeControl = true;
			o.private.mapTypeControlOptions = {
				mapTypeIds: [
					'mapTypeOption01',
					google.maps.MapTypeId.SATELLITE
				]
			};
		} else {
			o.private.mapTypeControl = false;
			o.private.mapTypeControlOptions = {};
		}



		// Create a CSS scope by using a unique class name per map.
		// This is then used to target styles injected via any <style> tags
		// at just this map (otherwise it would effect all maps on page).
		// We use a class and not an ID, as the map tag may already
		// have an ID, and we don't want to overwrite it
		// Generate a random interger
		function getRandomInt(min, max) {
			min = Math.ceil(min) + 1;
			max = Math.floor(max);
			return Math.floor(Math.random() * (max - min)) + min;
		};
		// Create our random class
		// Weirdness: mapKey counts up: 0,0,1,2,3 ...weird
		var thisMapUniqueClass = 'ergMap' + ergMapKey + '_' + getRandomInt(1000000000, 9999999999);
		// Apply the class to the map
		$m.addClass(thisMapUniqueClass);

		// Helper function to prepare a stylesheet by adding a new
		// prefixSelector to each line in stylesheetLinesArray and
		// to return the CSS as a string nicely wrapped in a style tag
		var prepareStylesheet = function(stylesheetLinesArray, prefixSelector) {
			if (!stylesheetLinesArray || !prefixSelector) {
				console.error('prepareStylesheet failed with too few arguments');
			}
			var stylesheet = '<style type="text/css">' + "\r";
			for (var stylesheetLinesArray='', i=0, len=stylesheetArray.length; i < len; i++) {
				// Add a prefixSelector to every line of the CSS
				// Remember to add the dot before the classname!
				stylesheet += "\t." + prefixSelector + ' ' + stylesheetArray[i] + "\r";
			}
			stylesheet += "</style>\r";
			return stylesheet;
		}



		// Add a wrapper div to add the map into
		$m.html('<div class="erg-google-map-wrap" style="width:100%; height:100%">');
		// Handy reference to the now Google Map wrapper div
		var $gm = $m.find('.erg-google-map-wrap');
		// Style the background of the map to better see it if nothing loads
		$gm.css('background-color', 'rgba(128, 128, 128, 0.2)');

		// Initialise the map
		if (pollutionOverlayType) {
			var googleMapOptions = {

				// Map zoom level and position
				zoom: parseInt(o.zoom),
				center: {
					lat: Number(o.lat),
					lng: Number(o.lng)
				},

				// Normally just show zoom UI
				// https://developers.google.com/maps/documentation/javascript/controls
				disableDefaultUI:      true,
				zoomControl:           o.zoomcontrol,
				// scaleControl:       false,
				// streetViewControl:  false,
				// rotateControl:      false,
				// fullscreenControl:  false,

				// Should we show the type controls (i.e. the Map + Satellite buttons)
				mapTypeControl:        o.private.mapTypeControl,
				mapTypeControlOptions: o.private.mapTypeControlOptions,

				// Does the scrollwheel zoom the map?
				scrollwheel:           o.scrollwheelzoom,

			}
			var googleMap = new google.maps.Map($gm[0], googleMapOptions);

			// Let map be accessed via DOM... e.g.
			// $('.my-map').data('map').zoom;
			// http://stackoverflow.com/a/26879671/2266157
			$m.data('map', googleMap);
			// Optionally console.log() the lat, lng, and zoom
			if (o.consoleloglatlngzoom) {
				googleMap.addListener(
					'bounds_changed',
					$.fn.debounce(
						function() {
							console.info(
								'lat: '    + googleMap.center.lat() + ', '
								+ 'lng: '  + googleMap.center.lng() + ', '
								+ 'zoom: ' + googleMap.zoom
							);
						},
						2000 // Optionally specify a custom debounce timeout
					)//; no semicolon as we're in addListener()
				);
			};

			// Method to refresh the map
			this.refresh = function() {
				// var map = $m.data('map');
				// google.maps.event.trigger(map, 'resize');
				//google.maps.event.trigger(googleMap, 'resize');
				$m.ergMap(o); //.ergMap('options', o);
				//googleMap = new google.maps.Map($gm[0], googleMapOptions);
				// $m.ergMap();
				return $el;
			}

		} else {
			// Style the background of the map to better see it if we have an error
			$gm.css('background-color', 'rgba(200, 128, 128, 0.5)');
			// Log error to console and die (return) out of $ergMap()
			console.error('Unsupported map overlay type: "' + o.overlay + '"');
			return false;
		}



		// Apply a Google Maps theme (e.g. greyscale)
		// Create a new StyledMapType object, passing it the array of styles,
		// as well as the name to be displayed on the map type control.
		var mapStyleOption = new google.maps.StyledMapType(
			o.private.themes[o.theme], { name: 'Map' }
		);
		// Associate the styled map with the MapTypeId and set it to display.
		googleMap.mapTypes.set('mapTypeOption01', mapStyleOption);
		googleMap.setMapTypeId('mapTypeOption01');



		// Pollution overlays:
		// Show monitoring stations
		if (o.overlay.toLowerCase() === 'none') {
			// No opactity slider if we've not got an overlay
			o.opacityslider = false;

		} else if (o.overlay.toLowerCase() === 'monitoring-stations') {
			// No opactity slider if we've not got an overlay
			o.opacityslider = false;
			// Routing is explicitly denied for monitoring-sations map type
			o.routing = false;

			jQuery.get('https://www.londonair.org.uk/london/rss/rssLaGroupXml.asp?lagroup=LAQNiPhone', {}, function(data) {
				// IE8, how we love you!
				// http://stackoverflow.com/questions/12046595/ie8-dom-transforming-xml-and-returning-nothing-from-jquery-find-or-filter
				// data = $.parseXML(data);

				jQuery(data).find('site').each(function() {
					var marker = jQuery(this);
					// Ignore the london mean site
					if (marker.attr('sitecode') != 'LBG' && marker.attr('sitecode') != 'LMN' && marker.attr('sitecode') != 'LRS') {
						var latlng = new google.maps.LatLng(parseFloat(marker.attr('latitude')), parseFloat(marker.attr('longitude')));

						// Determine the max aqindex for the site
						var maxAqIndex = -1;
						jQuery(marker).find('species').each(function() {
							var aqIndex = jQuery(this).attr('aqindex');
							if (maxAqIndex < aqIndex) {
								maxAqIndex = aqIndex;
							}
						});
						// Whether to use large or small markers
						var markerSize = o.monitoringmarkerslarge ? 'AQLarge' : 'AQSmall';
						// Create the marker
						var marker = new google.maps.Marker({
							position: latlng,
							map: googleMap,
							icon: absolutePathToErgMap + '/monitoring/' + markerSize + maxAqIndex + '.png',
							// Set z-index to aqindex so higher pollution appears in front of lower pins
							zIndex: parseInt(maxAqIndex)
						});
					}
				});
			});

		// If showing the 20m model, what type of pollution overlay are we thinking?
		} else {
			// Add the pollution overlay
			var url = 'https://webgis.erg.ic.ac.uk/ergwebsvr/rest/services/' + pollutionOverlayType + '/MapServer';
			// var url = 'https://webgis.erg.ic.ac.uk/ergwebsvr/rest/services/Combinednow2010/MapServer';
			// var url = 'http://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer';

			// Google won't allow a map to be set up with an overlay opacity set to 0
			// instead overriding your intention with something like 0.8,
			// so sniff for that edge-case and set it to _practically_ 0
			if (o.opacity === 0) o.opacity = 0.001;

			// var pollutionOverlayLayer = new gmaps.ags.MapOverlay(
			var pollutionOverlayLayer = new gmaps.ags.MapType(
				url,
				{
					name: 'ArcGIS',
					opacity: o.opacity,
				}
			);
			// pollutionOverlayLayer.setMap(googleMap);
			googleMap.overlayMapTypes.insertAt(0, pollutionOverlayLayer);

			// Update the map's opacity
			function updateOpacity(opacity) {
				// Opacity must be between 0 and 1 inclusive
				if (opacity>=0 && opacity<=1) {
					// Set the layer opacity
					pollutionOverlayLayer.setOpacity(opacity);
				} else {
					console.error('Opacity must be between 0 and 1')
				}
			}

			// Set opacity via external method (which doesn't then fire an event)
			this.setOpacity = function(opacity) {
				updateOpacity(opacity);
				return $el;
			}

			// Fade the pollution overlay in and out (i.e. fade in when idle)
			if (o.fadeoutoverlayondrag) {
				google.maps.event.addListener(googleMap, 'idle', function(e) {
					$gm.addClass('idle');
					setTimeout(function() {
						$gm.removeClass('busy');
					}, 200);
				});
				// Debounce these events otherwise we're updating the DOM a
				// whole lot, which would probably slow down older browsers
				googleMap.addListener(
					'bounds_changed',
					$.fn.debounce(
						function() {
							$gm.addClass('busy');
							$gm.removeClass('idle');
						},
						100, // debounce timeout
						true // immediate (fire at the beginning not the end of the debounce)
					)//; no semicolon as we're in addListener()
				);
				var stylesheetArray = [
					// This selector targets an inline style with the image of the pollution overlay
					'[style *= "webgis.erg.ic.ac.uk"] { transition: opacity 400ms; }', //opacity: auto !important;
					'.busy [style *= "webgis.erg.ic.ac.uk"] { opacity: 0 !important; transition: opacity 150ms; }',
					// Optional, later starting, transition // cubic-bezier(0.73,-0.28, 0.71, 0.16);
				];
				// Add the opacity stylesheet, prepending each line it with this map's unique class
				var stylesheet = prepareStylesheet(stylesheetArray, thisMapUniqueClass);
				$m.append(stylesheet);
			}
		}



		// Some styles added to all maps
		var stylesheetArray = Array();

		// Reduce the silly size of the Google Maps zoom UI
		stylesheetArray.push('div[controlheight="81"].gm-bundled-control { bottom:51px!important; right:25px!important; transform:scale(0.6); }');

		// Multiply and/or blur the pollution overlay
		o.overlaymultiply = true; // ready to be put into user options
		// o.overlayblur = true; // ready to be put into user options
		if (o.overlaymultiply) stylesheetArray.push('div[tabindex="0"] > div:first-child > div:first-child { mix-blend-mode: multiply; }');
		// if (o.overlayblur)     stylesheetArray.push('div[tabindex="0"] > div:first-child > div:first-child { filter: blur(2px); }');

		// Add the opacity stylesheet, prepending each line it with this map's unique class
		var stylesheet = prepareStylesheet(stylesheetArray, thisMapUniqueClass);
		$m.append(stylesheet);



		// Opacity slider
		if (o.opacityslider) {
			var opacitySliderCSS = '' +
			'<style type="text/css">' +
			// Hide until it's on the map
			'	.erg-opacity-slider-container { display:none; }' +
			'	.erg-google-map-wrap .erg-opacity-slider-container { display:block; }' +
			// Style the wrapper
			'	.erg-opacity-slider-container { width:144px; height:15px; line-height:15px; margin:10px 10px 10px 0; box-sizing:border-box; }' +
			'	.erg-opacity-slider-container { position:relative; padding:2px 15px; font-size:8px; text-align:center; color:#666; user-select:none; }' +
			// If we are showing routing too, make sure we don't overlap
			'	.erg-opacity-slider-container.erg-opactiy-slider-clear-routing { top:44px !important; }' +
			// Basic element styling
			'	.erg-opacity-slider-bar,' +
			'	.erg-opacity-slider-handle,' +
			'	.erg-opacity-slider-less,' +
			'	.erg-opacity-slider-more { background-color:#fff; cursor:pointer; box-shadow:rgba(0, 0, 0, 0.35) 0px 1px 4px 0px; }' +
			// Positioning and border radius
			'	.erg-opacity-slider-handle,' +
			'	.erg-opacity-slider-less,' +
			'	.erg-opacity-slider-more { position:absolute; top:0; border-radius:2px; }' +
			// Slider bar and text
			'	.erg-opacity-slider-bar { position:relative; width:100% !important; margin:0 auto; height:100%; padding:0 5px; text-align:left; color:#aaa; line-height:11px; }' +
			'	.erg-opacity-slider-bar.erg-opactiy-slider-text-right { text-align:right; }' +
			'	.erg-opacity-slider-handle { z-index:10; position:absolute; top:0px; left:0px; width:10px; height:15px; margin-top:-2px; cursor:ew-resize!important; }' +
			// More and less buttons
			'	.erg-opacity-slider-less,' +
			'	.erg-opacity-slider-more { z-index:5; width:15px; font-size:13px; font-weight:bold; }' +
			'	.erg-opacity-slider-less { left:0px; }' +
			'	.erg-opacity-slider-more { right:0px; }' +
			'</style>';

			var opacitySliderHTML = '' +
			'<div class="erg-opacity-slider-container">' +
			'	<div class="erg-opacity-slider-less" title="Less">&minus;</div>' +
			'	<div class="erg-opacity-slider-bar" style="width:160px;">' +
			'		opacity <span class="erg-opacity-slider-value"></span>%' +
			'		<div class="erg-opacity-slider-handle" title="Drag to change opacity">&nbsp;</div>' +
			'	</div>' +
			'	<div class="erg-opacity-slider-more" title="More">+</div>' +
			'</div>';

			// Only apply the CSS again if it's not aready on page
			// Opacity slider CSS is shared between all widgets on a single page
			if ($('.erg-opacity-slider-container').length === 0) $('body').append(opacitySliderCSS);

			// Add this map's specific opacity slider HTML
			$m.append(opacitySliderHTML);

			// Initialise selectors to this map's specific opacity slider UI
			// Subsequently we reference HTML DOM items directly with (e.g.) $bar[0]
			var $container = $('.' + thisMapUniqueClass + ' .erg-opacity-slider-container');
			var $handle    = $('.' + thisMapUniqueClass + ' .erg-opacity-slider-handle');
			var $bar       = $('.' + thisMapUniqueClass + ' .erg-opacity-slider-bar');
			var $less      = $('.' + thisMapUniqueClass + ' .erg-opacity-slider-less');
			var $more      = $('.' + thisMapUniqueClass + ' .erg-opacity-slider-more');
			var $value     = $('.' + thisMapUniqueClass + ' .erg-opacity-slider-value');

			// Position the opacity slider onto the map
			googleMap.controls[  google.maps.ControlPosition.TOP_RIGHT  ].push( $container[0] );
			// Move out of the way of the routing UI internally if needed
			if (o.routing && o.routingtravelmodewrap===undefined || o.typecontrols) {
				$container.addClass('erg-opactiy-slider-clear-routing');
			}

			// Setup and initialise the opacity slider
			var range = $bar.outerWidth() + 4; // weird, should be: $bar.outerWidth() - $handle.outerWidth();
			var opacitySlider = new ExtDraggableObject(
				$handle[0],
				{
					restrictY: true,
					container: $bar[0]
				}
			);
			// Initialise (don't fire opacity event though)
			updateOpacityUI(o.opacity, true, false);

			// Drag opacity slider (don't programatically move the slider as the
			// user's doint that, do fire events though)
			google.maps.event.addListener(opacitySlider, 'drag', function() {
				var opacity = opacitySlider.left() / range;
				updateOpacityUI(opacity, false);
			});

			// Decrease opacity button (move slider and fire an event)
			google.maps.event.addDomListener($less[0], 'click', function() {
				var opacity = Math.max(pollutionOverlayLayer.getOpacity() - 0.1, 0);
				updateOpacityUI(opacity);
			});

			// Increase opacity button (move slider and fire an event)
			google.maps.event.addDomListener($more[0], 'click', function() {
				var opacity = Math.min(pollutionOverlayLayer.getOpacity() + 0.1, 1);
				updateOpacityUI(opacity);
			});

			// Update opacity, optionally move the slider, optionally fire an event
			function updateOpacityUI(opacity, moveSlider, fireEvent) {
				if (moveSlider===undefined) moveSlider = true;
				if (fireEvent===undefined) fireEvent = true;

				// Sidestep floating point bug where number can massively overshoot
				opacity = parseInt(opacity*1000)/1000;

				updateOpacity(opacity);

				// Fire an even (optioanlly)
				if (fireEvent)  $m.trigger('opacity.ergmap', [opacity]);

				// Move the slider (optioanlly)
				if (moveSlider) opacitySlider.setValueX(range * opacity);

				// Update the number on the opacity slider
				var percent = parseInt(parseFloat(opacity)*100);
				$('.erg-opacity-slider-value').html(percent);

				// Update the text position on the opacity slider
				if (percent < 50) {
					$bar.addClass('erg-opactiy-slider-text-right');
				} else {
					$bar.removeClass('erg-opactiy-slider-text-right');
				};
			}

			// Set opacity via external method (which doesn't then fire an event)
			this.setOpacity = function(opacity) {
				updateOpacityUI(opacity, true, false);
				return $el;
			}
		}



		// Add the banding strips
		if (o.bandingstrip) {
			var bandingStripCSS = '' +
			'<style type="text/css">' +

			// Hide all the banding strips
			'	.erg-map-banding-strip .monitoring-stations,' +
			'	.erg-map-banding-strip .hourly-combined-no-o3,' +
			'	.erg-map-banding-strip .hourly-combined,' +
			'	.erg-map-banding-strip .hourly-no2,' +
			'	.erg-map-banding-strip .hourly-o3,' +
			'	.erg-map-banding-strip .hourly-pm10,' +
			'	.erg-map-banding-strip .hourly-pm25,' +
			'	.erg-map-banding-strip .annual-no2,' +
			'	.erg-map-banding-strip .annual-o3,' +
			'	.erg-map-banding-strip .annual-pm10,' +
			'	.erg-map-banding-strip .annual-pm25 { display: none; }' +

			// Only show the correct banding strip
			'	.monitoring-stations .erg-map-banding-strip .monitoring-stations,' +
			'	.hourly-combined-no-o3 .erg-map-banding-strip .hourly-combined-no-o3,' +
			'	.hourly-combined .erg-map-banding-strip .hourly-combined,' +
			'	.hourly-no2 .erg-map-banding-strip .hourly-no2,' +
			'	.hourly-o3 .erg-map-banding-strip .hourly-o3,' +
			'	.hourly-pm10 .erg-map-banding-strip .hourly-pm10,' +
			'	.hourly-pm25 .erg-map-banding-strip .hourly-pm25,' +
			'	.annual-no2 .erg-map-banding-strip .annual-no2,' +
			'	.annual-o3 .erg-map-banding-strip .annual-o3,' +
			'	.annual-pm10 .erg-map-banding-strip .annual-pm10,' +
			'	.annual-pm25 .erg-map-banding-strip .annual-pm25 { display: block; }' +

			// Style the banding strips
			'	.erg-map-banding-strip {' +
			'		position: relative;' +
			'	}' +
			'	.erg-map-banding-strip table {' +
			'		border-collapse: collapse;' +
			'		width: 100%;' +
			'		height: 14px;' +
			'		line-height: 14px;' +
			'	}' +
			'	.erg-map-banding-strip .b2 table {' +
			'		position: absolute;' +
			'		top: 0;' +
			'		left: 0;' +
			'		z-index: 2;' +
			'		font-weight: 700;' +
			'		font-size: 11px;' +
			'		text-align: center;' +
			'		font-family: "Arial Narrow", "Nimbus Sans L", sans-serif;' +
			'		-webkit-font-smoothing: antialiased;' +
			'		font-weight: bold;' +
			'	}' +
			'	.erg-map-banding-strip .b2 table td {' +
			'		color: #fff;' +
			'	}' +
			'	.erg-map-banding-strip .levels {' +
			'		display: none;' +
			'	}' +
			'	@media (min-width:350px) {' +
			'		.erg-map-banding-strip .levels {' +
			'			display: table-cell;' +
			'		}' +
			'	}' +
			'</style>';

			var bandingStripHTML = '' +
			'<div class="erg-map-banding-strip">' +
			'	<div class="hourly-combined-no-o3 hourly-combined hourly-no2 hourly-o3 hourly-pm10 hourly-pm25">' +
			'		<div class="b1">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="background-color: #666666;width: 11%;" class="levels">&nbsp;</td>' +
			'						<td style="background-color: #5cb8de; width: 4%;">&nbsp;</td>' +
			'						<td style="background-color: #2d70c8; width: 4%;">&nbsp;</td>' +
			'						<td style="background-color: #004da8; width: 4%;">&nbsp;</td>' +
			'						<td style="background-color: #a3cc7a; width: 4%;">&nbsp;</td>' +
			'						<td style="background-color: #66a33e; width: 4%;">&nbsp;</td>' +
			'						<td style="background-color: #2b8200; width: 4%;">&nbsp;</td>' +
			'						<td style="background-color: #eebf8f; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #fe994d; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #f46200; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #d80000; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #a30000; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #7a0000; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #000000; width: 17%;">&nbsp;</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'		<div class="b2">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="width: 11%;" class="levels">LEVELS</td>' +
			'						<td style="width: 24%;">LOW</td>' +
			'						<td style=" width: 24%;">MODERATE</td>' +
			'						<td style=" width: 24%;">HIGH</td>' +
			'						<td style="width: 17%;">v.HIGH</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'	</div>' +
			'	<div class="monitoring-stations">' +
			'		<div class="b1">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="background-color: #666666;width: 11%;" class="levels">&nbsp;</td>' +
			'						<td style="background-color: #a3cc7a; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #66a33e; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #2b8200; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #eebf8f; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #fe994d; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #f46200; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #d80000; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #a30000; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #7a0000; width: 8%;">&nbsp;</td>' +
			'						<td style="background-color: #000000; width: 17%;">&nbsp;</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'		<div class="b2">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="width: 11%;" class="levels">LEVELS</td>' +
			'						<td style="width: 24%;">LOW</td>' +
			'						<td style=" width: 24%;">MODERATE</td>' +
			'						<td style=" width: 24%;">HIGH</td>' +
			'						<td style="width: 17%;">v.HIGH</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'	</div>' +
			'	<div class="annual-no2">' +
			'		<div class="b1">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="background-color: #0000ff;">&nbsp;</td>' +
			'						<td style="background-color: #0064ff;">&nbsp;</td>' +
			'						<td style="background-color: #0078ff;">&nbsp;</td>' +
			'						<td style="background-color: #0095ff;">&nbsp;</td>' +
			'						<td style="background-color: #00c8ff;">&nbsp;</td>' +
			'						<td style="background-color: #00dcff;">&nbsp;</td>' +
			'						<td style="background-color: #00dcc8;">&nbsp;</td>' +
			'						<td style="background-color: #00dc96;">&nbsp;</td>' +
			'						<td style="background-color: #c8f064;">&nbsp;</td>' +
			'						<td style="background-color: #ffffff;" width="2"></td>' +
			'						<td style="background-color: #ffff00;">&nbsp;</td>' +
			'						<td style="background-color: #fff500;">&nbsp;</td>' +
			'						<td style="background-color: #ffeb00;">&nbsp;</td>' +
			'						<td style="background-color: #ffe100;">&nbsp;</td>' +
			'						<td style="background-color: #ffd700;">&nbsp;</td>' +
			'						<td style="background-color: #ffcd00;">&nbsp;</td>' +
			'						<td style="background-color: #ffa000;">&nbsp;</td>' +
			'						<td style="background-color: #ff7d00;">&nbsp;</td>' +
			'						<td style="background-color: #ff6400;">&nbsp;</td>' +
			'						<td style="background-color: #ff5000;">&nbsp;</td>' +
			'						<td style="background-color: #ff3c00;">&nbsp;</td>' +
			'						<td style="background-color: #ff2800;">&nbsp;</td>' +
			'						<td style="background-color: #ff1400;">&nbsp;</td>' +
			'						<td style="background-color: #ff0000;">&nbsp;</td>' +
			'						<td style="background-color: #e60000;">&nbsp;</td>' +
			'						<td style="background-color: #d20000;">&nbsp;</td>' +
			'						<td style="background-color: #be0000;">&nbsp;</td>' +
			'						<td style="background-color: #aa0000;">&nbsp;</td>' +
			'						<td style="background-color: #820000;">&nbsp;</td>' +
			'						<td style="background-color: #500000; ">&nbsp;</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'		<div class="b2">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="width: 31.04%;">PASS</td>' +
			'						<td style="width: 68.96%;">FAIL</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'	</div>' +
			'	<div class="annual-o3">' +
			'		<div class="b1">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="background-color: #0000FF;">&nbsp;</td>' +
			'						<td style="background-color: #3661FF;">&nbsp;</td>' +
			'						<td style="background-color: #3B96FF;">&nbsp;</td>' +
			'						<td style="background-color: #38B3FF;">&nbsp;</td>' +
			'						<td style="background-color: #2ECEFF;">&nbsp;</td>' +
			'						<td style="background-color: #1FECFF;">&nbsp;</td>' +
			'						<td style="background-color: #2EFFF5;">&nbsp;</td>' +
			'						<td style="background-color: #61FFDD;">&nbsp;</td>' +
			'						<td style="background-color: #85FFC2;">&nbsp;</td>' +
			'						<td style="background-color: #ffffff;" width="2"></td>' +
			'						<td style="background-color: #FBFF19;">&nbsp;</td>' +
			'						<td style="background-color: #FFEE00;">&nbsp;</td>' +
			'						<td style="background-color: #FFBF00;">&nbsp;</td>' +
			'						<td style="background-color: #FFA200;">&nbsp;</td>' +
			'						<td style="background-color: #FF8C00;">&nbsp;</td>' +
			'						<td style="background-color: #FF7300;">&nbsp;</td>' +
			'						<td style="background-color: #FF5500;">&nbsp;</td>' +
			'						<td style="background-color: #FF3700;">&nbsp;</td>' +
			'						<td style="background-color: #FF0000;">&nbsp;</td>' +
			'						<td style="background-color: #E00000;">&nbsp;</td>' +
			'						<td style="background-color: #C70000;">&nbsp;</td>' +
			'						<td style="background-color: #B00000;">&nbsp;</td>' +
			'						<td style="background-color: #960000;">&nbsp;</td>' +
			'						<td style="background-color: #7D0000;">&nbsp;</td>' +
			'						<td style="background-color: #630000;">&nbsp;</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'		<div class="b2">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="width: 37.5%;">PASS</td>' +
			'						<td style="width: 62.5%;">FAIL</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'	</div>' +
			'	<div class="annual-pm10">' +
			'		<div class="b1">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="background-color: #0000ff;">&nbsp;</td>' +
			'						<td style="background-color: #0064ff;">&nbsp;</td>' +
			'						<td style="background-color: #0078ff;">&nbsp;</td>' +
			'						<td style="background-color: #0095ff;">&nbsp;</td>' +
			'						<td style="background-color: #00c8ff;">&nbsp;</td>' +
			'						<td style="background-color: #00dcff;">&nbsp;</td>' +
			'						<td style="background-color: #00dcc8;">&nbsp;</td>' +
			'						<td style="background-color: #00dc96;">&nbsp;</td>' +
			'						<td style="background-color: #c8f064;">&nbsp;</td>' +
			'						<td style="background-color: #ffffff;" width="2"></td>' +
			'						<td style="background-color: #ffff00;">&nbsp;</td>' +
			'						<td style="background-color: #ffdd0c;">&nbsp;</td>' +
			'						<td style="background-color: #ffbc1b;">&nbsp;</td>' +
			'						<td style="background-color: #fd6300;">&nbsp;</td>' +
			'						<td style="background-color: #ff0000;">&nbsp;</td>' +
			'						<td style="background-color: #c80000;">&nbsp;</td>' +
			'						<td style="background-color: #000000;">&nbsp;</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'		<div class="b2">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="width: 56.25%;">PASS</td>' +
			'						<td style="width: 43.75%;">FAIL</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'	</div>' +
			'	<div class="annual-pm25">' +
			'		<div class="b1">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="background-color: #0000fe;">&nbsp;</td>' +
			'						<td style="background-color: #0046ff;">&nbsp;</td>' +
			'						<td style="background-color: #008bfe;">&nbsp;</td>' +
			'						<td style="background-color: #00d1fe;">&nbsp;</td>' +
			'						<td style="background-color: #63fefe;">&nbsp;</td>' +
			'						<td style="background-color: #64ff96;">&nbsp;</td>' +
			'						<td style="background-color: #ffffff;" width="2"></td>' +
			'						<td style="background-color: #ffff00;">&nbsp;</td>' +
			'						<td style="background-color: #fedb00;">&nbsp;</td>' +
			'						<td style="background-color: #ffb400;">&nbsp;</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'		<div class="b2">' +
			'			<table>' +
			'				<tbody>' +
			'					<tr>' +
			'						<td style="width: 66.66%;">PASS</td>' +
			'						<td style="width: 33.33%;">FAIL</td>' +
			'					</tr>' +
			'				</tbody>' +
			'			</table>' +
			'		</div>' +
			'	</div>' +
			'</div>';

			// Only apply the CSS again if it's not aready on page
			// Banding strip CSS is shared between all widgets on a single page
			if ($('.erg-map-banding-strip').length === 0) $('body').append(bandingStripCSS);

			// Add the banding strips HTML
			$m.append(bandingStripHTML);

			// Reduce the height of the map to allow for the banding strip
			var bandingStripHeight = $('.erg-map-banding-strip').height() + 'px';
			$gm.css('height', 'calc(100% - ' + bandingStripHeight + ')');
		}



		// Style the Google Maps InfoWindow
		// Presently implemented for KML layers only as we need to add a class
		// .custom-iw, and that needs to be triggered on a an event, i.e. triggering:
		// google.maps.event.addListener(kmlLayer, 'click', function(kmlEvent) { styleKmlLayerInfoWindow(); });
		if (o.infowindowstyle) {

			// Get colour from o.private if not set by user
			if (o.infowindowbackgroundcolour === undefined) o.infowindowbackgroundcolour = o.private.infowindowbackgroundcolour;
			if (o.infowindowtextcolour       === undefined) o.infowindowtextcolour       = o.private.infowindowtextcolour;

			// One selector per line (as we add a selector to the start of each line later on)
			// n.b. styles MUST ALWAYS follow a selector, and CANNOT be on their own lines
			// Based on http://stackoverflow.com/a/28615817/2266157
			var stylesheetArray = [
				// Size and position of infowindow inner
				'.custom-iw .gm-style-iw { left:0 !important; border-radius:8px; box-sizing: border-box; padding:0; }',
				'.custom-iw > div:first-child > div:nth-child(2) { display:none; }',
				// Shadow
				'.custom-iw > div:first-child > div:last-child { left:0 !important; top:0px; box-shadow:rgba(0, 0, 0, 0.6) 0px 1px 6px; z-index:-1 !important; }',
				// Background colour
				'.custom-iw > div:first-child > div:nth-child(n-1) > div > div,',
				'.custom-iw > div > div:last-child,',
				'.custom-iw .gm-style-iw,',
				'.custom-iw .gm-style-iw > div,',
				'.custom-iw .gm-style-iw > div > div { background-color:' + o.infowindowbackgroundcolour + ' !important; }',
				// Change the speech bubble arrow colour
				'.custom-iw:after { background:' + o.infowindowbackgroundcolour + '; }',
				// Text colour
				'.custom-iw .gm-style-iw,',
				'.custom-iw > div:last-child:before { color:' + o.infowindowtextcolour + ' !important; -webkit-font-smoothing:initial; /* z-index: 20; */ }',
				// Close-button (note that there may be a scrollbar)
				'.custom-iw > button[title=Close] { width:25px !important; height:23px !important; }',
				'.custom-iw > button[title=Close] img { margin: 4px 9px !important; }',
				// Remove scrollbar white borders and add some padding to the infowindow
				'.custom-iw .gm-style-iw-d { padding: 6px 12px 10px; overflow: auto !important; z-index: 100; max-width: 300px !important; }',

				// Force smaller text on the KML layer InfoWindows
				// N.B. this is pretty fragile (based on one KML) and could break quite easily!!
				'.gm-style-iw > div > div > div > div:first-child,',
				'.gm-style-iw > div > div > div > h1,',
				'.gm-style-iw > div > div > div > h2,',
				'.gm-style-iw > div > div > div > h3,',
				'.gm-style-iw > div > div > div > h4 { font-size:11px !important; margin:2px 0 !important; }', // title
				'.gm-style-iw > div > div > div { font-size:9px !important; }', // bodycopy
				'.gm-style-iw > div > div > div a { color:' + o.infowindowtextcolour + ' !important; opacity:0.75; text-decoration:underline; }', // links

				// Force smaller text on the routing InfoWindows
				'.custom-iw.routing-iw .gm-style-iw h3 { font-size:11px !important; margin:2px 0 !important; }', // title
				'.custom-iw.routing-iw .gm-style-iw { font-size: 9px; !important; }', // bodycopy
				// Colours for the routing InfoWindows
				'.custom-iw.routing-iw.routing-hi  > div:first-child > div:nth-child(n-1) > div > div,',
				'.custom-iw.routing-iw.routing-hi  > div > div:last-child,',
				'.custom-iw.routing-iw.routing-hi  .gm-style-iw,',
				'.custom-iw.routing-iw.routing-hi  .gm-style-iw > div,',
				'.custom-iw.routing-iw.routing-hi  .gm-style-iw > div > div { background-color:' + o.private.infowindowrouting.high + ' !important; }',
				'.custom-iw.routing-iw.routing-hi:after                     { background:'       + o.private.infowindowrouting.high + '; }',
				'.custom-iw.routing-iw.routing-mid > div:first-child > div:nth-child(n-1) > div > div,',
				'.custom-iw.routing-iw.routing-mid > div > div:last-child,',
				'.custom-iw.routing-iw.routing-mid .gm-style-iw,',
				'.custom-iw.routing-iw.routing-mid .gm-style-iw > div,',
				'.custom-iw.routing-iw.routing-mid .gm-style-iw > div > div { background-color:' + o.private.infowindowrouting.middle + ' !important; }',
				'.custom-iw.routing-iw.routing-mid:after                    { background:'       + o.private.infowindowrouting.middle + '; }',
				'.custom-iw.routing-iw.routing-lo  > div:first-child > div:nth-child(n-1) > div > div,',
				'.custom-iw.routing-iw.routing-lo  > div > div:last-child,',
				'.custom-iw.routing-iw.routing-lo  .gm-style-iw,',
				'.custom-iw.routing-iw.routing-lo  .gm-style-iw > div,',
				'.custom-iw.routing-iw.routing-lo  .gm-style-iw > div > div { background-color:' + o.private.infowindowrouting.low + ' !important; }',
				'.custom-iw.routing-iw.routing-lo:after                     { background:'       + o.private.infowindowrouting.low + '; }',
				// Text colour
				'.custom-iw.routing-iw .gm-style-iw,',
				'.custom-iw.routing-iw > div:last-child:before { color:' + o.private.infowindowrouting.text + ' !important; }',
			];

			// Add the stylesheet
			var stylesheet = prepareStylesheet(stylesheetArray, thisMapUniqueClass);
			$m.append(stylesheet);

			// Setup a callback function to apply the KML Layer InfoWindow popup styles
			var styleKmlLayerInfoWindow = function() {
				setTimeout(function() {
					$('.' + thisMapUniqueClass + ' ' + '.gm-style-iw').parent().addClass('custom-iw');
				}, 1);
			};
		}



		// Add any KML or KMZ laters to the map
		// https://developers.google.com/maps/documentation/javascript/kml
		if (o.kmllayer) {
			if (!Array.isArray(o.kmllayer)) {
				o.kmllayer = [o.kmllayer];
			}

			// Show or hide the KML / KMZ layers
			function showKmlLayers(show) {
				if (show===undefined) show = true;
				if (show) {
					o.kmllayerGoogleMapsObjects = Array();
					$(o.kmllayer).each(function() {
						var kmlLayer = new google.maps.KmlLayer(
							this.toString(),
							{
								preserveViewport: true
							}
						);
						o.kmllayerGoogleMapsObjects.push(kmlLayer);
						kmlLayer.setMap(googleMap);

						// If we're styling the InfoWindows, listen for events on the kmlLayer
						// so we can apply the CSS hooks needed to style the InfoWindow popups
						if (typeof styleKmlLayerInfoWindow !== 'undefined') {
							google.maps.event.addListener(kmlLayer, 'click', function(kmlEvent) {
								styleKmlLayerInfoWindow();
							});
						}
					});
				} else {
					o.kmllayerGoogleMapsObjects.forEach(function(kmllayer) {
						kmllayer.setMap(null);
					});
				}
			}
			showKmlLayers();
		}



		// KML layer show/hide UI
		o.kmllayershowhide = true; // ready to be another user preference
		if (o.kmllayershowhide && o.kmllayer) { // also require o.kmllayer to be present!
			var kmlLayerShowHideCSS = '' +
			'<style type="text/css">' +
			// Hide until it's on the map
			'	.erg-kml-layer-show-hide-container { display:none; }' +
			'	.erg-google-map-wrap .erg-kml-layer-show-hide-container { display:block; }' +
			// Style the show/hide UI
			'	.erg-kml-layer-show-hide-container { margin:7px 10px 7px 0; color:#fff; text-shadow:0px 1px 4px #000; }' +
			'	.erg-kml-layer-show-hide-container label,' +
			'	.erg-kml-layer-show-hide-container input, { cursor:pointer; }' +
			'</style>';

			var kmlLayerShowHideHTML = '' +
			'<div class="erg-kml-layer-show-hide-container">' +
			'	<label><input type="checkbox" checked> Clean air routes</label>' +
			'</div>';

			// Only apply the CSS again if it's not aready on page
			// kmlLayerShowHide CSS is shared between all widgets on a single page
			if ($('.erg-kml-layer-show-hide-container').length === 0) $('body').append(kmlLayerShowHideCSS);

			// Add this map's specific kmllayershowhide HTML
			$m.append(kmlLayerShowHideHTML);

			// Initialise selectors to this map's specific opacity slider UI
			// Subsequently we reference HTML DOM items directly with (e.g.) $bar[0]
			var $container = $('.' + thisMapUniqueClass + ' .erg-kml-layer-show-hide-container');

			// Position the kmllayershowhide UI onto the map
			googleMap.controls[  google.maps.ControlPosition.TOP_RIGHT  ].push( $container[0] );
			// // Move out of the way of the routing UI internally if needed
			// if (o.routing && o.routingtravelmodewrap===undefined || o.typecontrols) {
			// 	$container.addClass('erg-opactiy-slider-clear-routing');
			// }

			// Show/hide the KML layers
			$container.find('input').change(function() {
				var checked = $(this).is(':checked');
				showKmlLayers(checked);
			});
		}



		// Show or hide the Google credits and branding
		if (o.googlebrand) {
			// Move the Google logo up a bit if we're showing the ICL credit
			if (o.iclcredit) {
				var stylesheetArray = ['.gm-style>div a[href ^= "https://maps.google"]>div { margin-bottom: 13px; }'];
			}
			var stylesheet = prepareStylesheet(stylesheetArray, thisMapUniqueClass);
			$m.append(stylesheet);

		// Otherwise hide the Google branding
		} else {
			// One selector per line (we add a selector to the start of each line later on)
			// n.b. styles MUST ALWAYS follow a selector, and CANNOT be on their own lines
			var stylesheetArray = [
				// Hide Google logo
				'.gm-style > div a[href ^= "https://maps.google"],',
				// Hide "Terms of use" + "Map data copyright Google"
				'.gm-style > .gmnoprint.gm-style-cc,',
				'.gm-style > .gmnoprint > .gm-style-cc { display:none !important; }',
				// Hide "Report a map error"
				'div[draggable="false"].gm-style-cc { display:none !important; }',
				// Reposition and re-show the zoom control
				// (NOT NEEDED, Google seems to do this automatiacally)
				// '.gm-style>div.gmnoprint.gm-bundled-control { display:block !important; margin-bottom:-4px !important; }',
			];
			// Add the stylesheet
			var stylesheet = prepareStylesheet(stylesheetArray, thisMapUniqueClass);
			$m.append(stylesheet);
		}



		// Add a ICL credit
		if (o.iclcredit) {
			var iclCredit = '' +
			'<a href="https://www.imperial.ac.uk/school-public-health/environmental-research-group/" target="_top" ' +
			'	style="position:absolute; bottom:0; left:0; width:auto; ' +
			'	height:auto; display:block; padding-right:4px; padding-left:4px; ' +
			'	opacity:.7; text-decoration:none; background:rgba(245, 245, 245, 0.75); ' +
			'	font-family:Roboto, Arial, sans-serif; font-size:10px; color:#000; ' +
			'	white-space:nowrap; z-index:100;">Pollution data - ICL</a>';
			// Add into Google Maps div
			$m.find('.erg-google-map-wrap>div:first-child').append(iclCredit);
		}



		// Setup routing
		if (o.routing) {



			/**
			* @constructor
			*/
			function AutocompleteDirectionsHandler(map, inputFrom, inputTo, travelModeWrap) {
				var me = this;

				// Init
				me.map = map;
				me.originPlaceId = null;
				me.destinationPlaceId = null;
				me.originLatLng = null;
				me.destinationLatLng = null;
				me.travelMode = 'WALKING';
				me.routeOnMap = false;
				me.directionsService = new google.maps.DirectionsService;
				// me.directionsRenderer = new google.maps.DirectionsRenderer;
				me.directionsRendererArray = new Array(); // Array of google.maps.DirectionsRenderer;
				me.infoWindows = new Array();
				// me.haltAsyncMapRender = false;

				// Add the loading UI
				me.addLoadingUI();
				// Listen for any clicks on the map to add from/to pins
				me.setupDropPinClickListener();

				// Add the default UI onto the map
				me.addRoutingUI();
				// Select the search input elements from the string CSS selector
				me.inputFrom = $(inputFrom)[0];
				me.inputTo = $(inputTo)[0];
				me.travelModeWrap = $(travelModeWrap)[0];
				// Autoselect all text when clicking an input
				$(inputFrom).on('click', function() { this.select(); });
				$(inputTo).on('click', function() { this.select(); });
				// Now we have the UI ready, setup autocomplete listeners on inputs
				me.initRoutingAutocomplete();
				// Setup the radio buttons listener
				$(me.travelModeWrap).find('input').on('change', function() {
					switch ($(this).val()) {
						case 'driving':   me.travelMode = google.maps.DirectionsTravelMode.DRIVING;   break;
						case 'bicycling': me.travelMode = google.maps.DirectionsTravelMode.BICYCLING; break;
						case 'transit':   me.travelMode = google.maps.DirectionsTravelMode.TRANSIT;   break;
						case 'walking':   me.travelMode = google.maps.DirectionsTravelMode.WALKING;   break;
						default: alert('Unsupported travel mode. Valid options inlcude: walking/bicycling/driving/transit.');
					}
					me.route();
				});
			}



			/**
			* Add listeners and UI
			*/
			// Add the loading UI
			AutocompleteDirectionsHandler.prototype.addLoadingUI = function() {
				var loadingCSS = '' +
				'<style type="text/css">' +
				'	.erg-loading-cover {' +
				'		display: none;' +
				'		background: #0006;' +
				'		position: absolute;' +
				'		top: 0;' +
				'		left: 0;' +
				'		width: 100%;' +
				'		height: 100%;' +
				'		z-index: 100;' +
				'	}' +
				'	.erg-loading-cover div {' +
				'		display: none;' +
				'		position: absolute;' +
				'		top: 50%;' +
				'		left: 0;' +
				'		width: 100%;' +
				'		text-align: center;' +
				'		color: #fff;' +
				'		font-weight: bold;' +
				'		font-size: 12px;' +
				'	}' +
				'	.erg-loading-routes .erg-loading-cover,' +
				'	.erg-loading-routes div.routes,' +
				'	.erg-loading-location .erg-loading-cover,' +
				'	.erg-loading-location div.location {' +
				'		display: block;' +
				'	}' +
				'</style>';

				$m.find('.erg-google-map-wrap').append(
				'<div class="erg-loading-cover">' +
				'	<div class="routes">Calculating routes...</div>' +
				'	<div class="location">Determining your location...</div>' +
				'</div>');
				$m.append(loadingCSS);
			};

			// Add routing input listeners and optionally add the default inouts UI
			// No UI is added if selectors for external UI are passed to the options
			// via: routinginputfromselector + routinginputtoselector + routingtravelmodewrap
			AutocompleteDirectionsHandler.prototype.addRoutingUI = function() {
				var me = this;

				var routingCSS = '' +
				'<style type="text/css">' +
				'	.erg-controls {' +
				'		margin-top: 10px;' +
				'		margin-left: 12px;' +
				'		width: calc(33.4% - 16px); /* (12px * 4) / 3 = 16 */' +
				'		border: 1px solid transparent;' +
				'		border-radius: 2px 0 0 2px;' +
				'		box-sizing: border-box;' +
				'		-moz-box-sizing: border-box;' +
				'		height: 32px;' +
				'		outline: none;' +
				'		box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);' +
				'		color: #000;' +
				'		display: none;' +
				'	}' +
				// Only show the controls when they're applied to the map
				// i.e. a child of .erg-google-map-wrap
				'	.erg-google-map-wrap .erg-controls {' +
				'		display: block;' +
				'	}' +
				'	.erg-input-origin,' +
				'	.erg-input-destination {' +
				'		background-color: #fff;' +
				'		font-family: Roboto;' +
				'		font-size: 15px;' +
				'		font-weight: 300;' +
				'		padding: 0 11px 0 13px;' +
				'		text-overflow: ellipsis;' +
				'	}' +
				'	.erg-input-origin:focus,' +
				'	.erg-input-destination:focus {' +
				'		border-color: #4d90fe;' +
				'	}' +
				'	.erg-travel-mode-wrap {' +
				'		background-color: #fff;' +
				'		margin-left: 12px;' +
				'		padding: 5px 11px 0px 11px;' +
				'	}' +
				'	.erg-travel-mode-wrap label {' +
				'		font-family: "Roboto", sans-serif;' +
				'		font-size: 13px;' +
				'		font-weight: 300;' +
				'		margin-right: 6px;' +
				'	}' +
				'	.erg-travel-mode-wrap input[type=radio] {' +
				'		margin-right: 2px;' +
				'	}' +
				'	@media (max-width:600px) {' +
				'		.pac-container {' +
				'			width: 96%!important;' +
				'			left: 2% !important;' +
				'		}' +
				'	}' +
				'</style>';

				// Only apply the CSS if it's not aready on page
				// Routing strip CSS is shared between all widgets on a single page
				if ($('.erg-travel-mode-wrap').length === 0) $('body').append(routingCSS);

				// Add any default routing UI if needed
				if (o.routinginputfromselector === undefined) {
					$m.append('<input class="erg-input-origin erg-controls" type="text" placeholder="From (or click map)">');
				}
				if (o.routinginputtoselector === undefined) {
					$m.append('<input class="erg-input-destination erg-controls" type="text" placeholder="To">');
				}
				if (o.routingtravelmodewrap === undefined) {
					// Ensure that the radio buttons have a unique (to this map) form "name" attribute
					routingTravelModeHTML = '' +
					'<div class="erg-travel-mode-wrap erg-controls">' +
					'	<label>' +
					'		<input type="radio" name="' + thisMapUniqueClass + '_mode" value="walking" checked="checked">' +
					'		Walk' +
					'	</label>' +
					'	<label>' +
					'		<input type="radio" name="' + thisMapUniqueClass + '_mode" value="bicycling">' +
					'		Cycle' +
					'	</label>' +
					// '	<label>' +
					// '		<input type="radio" name="' + thisMapUniqueClass + '_mode" value="transit">' +
					// '		Transit</label>' +
					// '	</label>' +
					// '	<label>' +
					// '		<input type="radio" name="' + thisMapUniqueClass + '_mode" value="driving">' +
					// '		Driving</label>' +
					// '	</label>' +
					'</div>';
					// Add the routing travel mode HTML
					$m.append(routingTravelModeHTML);
				}
			};

			// Initialise the from and to autosuggest UI (on or off the map)
			AutocompleteDirectionsHandler.prototype.initRoutingAutocomplete = function() {
				var me = this;

				// Setup autocomplete on inputs (searching place IDs only)
				var originAutocomplete = new google.maps.places.Autocomplete(me.inputFrom, { fields: ['place_id', 'name', 'types'] });
				var destinationAutocomplete = new google.maps.places.Autocomplete(me.inputTo, { fields: ['place_id', 'name', 'types'] });
				me.setupPlaceChangedListener(originAutocomplete, 'ORIG');
				me.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

				// Only add the inputs into the map if we've NOT been given new selectors
				// for custom UI (i.e. custom UI is external, whereas default UI is overlaid)
				if (o.routinginputfromselector === undefined) {
					me.map.controls[google.maps.ControlPosition.TOP_LEFT].push(me.inputFrom);
				}
				if (o.routinginputtoselector === undefined) {
					me.map.controls[google.maps.ControlPosition.TOP_LEFT].push(me.inputTo);
				}
				if (o.routingtravelmodewrap === undefined) {
					me.map.controls[google.maps.ControlPosition.TOP_LEFT].push(me.travelModeWrap);
				}
			}

			// Listen for an autocomplete place_changed event, then update the map
			AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(autocomplete, mode) {
				var me = this;

				autocomplete.bindTo('bounds', me.map);
				autocomplete.addListener('place_changed', function() {
					var place = autocomplete.getPlace();
					if (!place.place_id) {
						window.alert("Please select an option from the dropdown list.");
						return;
					}
					if (mode === 'ORIG') {
						me.originPlaceId = place.place_id;
						me.originLatLng = false;
						me.cycleClicks = 1;
					} else {
						me.destinationPlaceId = place.place_id;
						me.destinationLatLng = false;
					}
					me.route();
				});
			};

			// Listen for an autocomplete place_changed event, then update the map
			AutocompleteDirectionsHandler.prototype.setupDropPinClickListener = function() {
				var me = this;

				// Cycle round the clicks' functionality
				me.cycleClicks = 0;
				me.markers = [];

				// Do we want a third click that clears the map without placing the marker?
				var threeClicks = true;

				googleMap.addListener('click', function(e) {
					// Clear a route if there is one present
					if (me.routeOnMap && threeClicks) {
						me.clear();
						me.reset();
						me.cycleClicks = 0;

					} else if (me.cycleClicks === 0) {
						if (!threeClicks) me.clear();
						// me.haltAsyncMapRender = true;

						me.originLatLng = e.latLng;
						me.markers[me.cycleClicks] = new google.maps.Marker({
							position: me.originLatLng,
							map: me.map
						});
						me.originPlaceId = false;
						$(me.inputFrom).val(e.latLng);

						me.cycleClicks++;
					// Grab destination latLng, and plot route
					} else if (me.cycleClicks === 1) {
						// me.haltAsyncMapRender = false;

						me.destinationLatLng = e.latLng;
						me.markers[me.cycleClicks] = new google.maps.Marker({
							position: me.destinationLatLng,
							map: me.map
						});
						me.destinationPlaceId = false;
						$(me.inputTo).val(e.latLng);

						me.cycleClicks = 0;
					}
					me.route();
				});
			};

			// Listen for a route being dragged, i.e. the directions_changed event, then recalculate the percentages
			AutocompleteDirectionsHandler.prototype.setupRouteDragListener = function() {
				var me = this;

				// Recalculate the routes if a route is dragged
				for (let i = 0; i < me.directionsRendererArray.length; i++) {
					me.directionsRendererArray[i].addListener('directions_changed', function() {
						console.log('directions_changed event fired');
						
						var newRoutes = Array();
						for (let j = 0; j < me.directionsRendererArray.length; j++) {
							if (me.directionsRendererArray[j].dragResult) {
								newRoutes.push(me.directionsRendererArray[j].directions.routes[0]);
							} else {
								newRoutes.push(me.directionsResponse.routes[j]);
							}
						}
						me.directionsResponse.routes = newRoutes;
						me.renderRoutes();
						
					});
				}
			};

			AutocompleteDirectionsHandler.prototype.addDetectedLocationAsFrom = function() {
				var me = this;

				me.clear();
				me.reset();
				me.cycleClicks = 0;

				// Try HTML5 geolocation
				if (navigator.geolocation) {
					$m.addClass('erg-loading-location');
					navigator.geolocation.getCurrentPosition(function(position) {
						me.originLatLng = {
							lat: position.coords.latitude,
							lng: position.coords.longitude
						};
						// new google.maps.LatLng(
						// 	position.coords.latitude,
						// 	position.coords.longitude
						// );
						me.markers[me.cycleClicks] = new google.maps.Marker({
							position: me.originLatLng,
							map: me.map
						});
						me.cycleClicks++;
						me.originPlaceId = false;
						//$(me.inputFrom).val(me.originLatLng);
						$(me.inputFrom).val('('+position.coords.latitude+', '+position.coords.longitude+')');
						me.route();
						me.map.setCenter(me.originLatLng);
						$m.removeClass('erg-loading-location');

					}, function() {
						$m.removeClass('erg-loading-location');
						alert('Error: geolocation not available. Please check location settings in your browser.');
					});
				} else {
					// Browser doesn't support Geolocation
					alert('Error: your browser doesn’t support geolocation.');
				}
			};


			/**
			* Clear the map
			*/			
			// Reset the map ready for a new first marker to be dropped
			AutocompleteDirectionsHandler.prototype.clear = function() {
				var me = this;

				// Clear any existing routes, InfoWindows, and dropped markers we have
				me.clearRoutes();
				me.clearInfoWindows();
				me.clearDroppedMarkers();
				me.routeOnMap = false;
				$m.removeClass('erg-loading-routes');
			}

			// Reset map routing vars
			AutocompleteDirectionsHandler.prototype.reset = function() {
				var me = this;

				// Reset all vars
				me.markers = [];
				me.originLatLng = null;
				me.destinationLatLng = null;
				me.originPlaceId = null;
				me.destinationPlaceId = null;
				$m.removeClass('erg-loading-routes');

				// Empty the from/to inputs
				$(me.inputFrom).val('');
				$(me.inputTo).val('');
			}

			// Clear any existing manually rendered routes (i.e. when we render more than one route)
			AutocompleteDirectionsHandler.prototype.clearRoutes = function() {
				var me = this;
				// Clear individual routes (not needed if doing single routes in sequence but needed
				// when we render multiple routes manually after having rendered a single route)
				// me.directionsRenderer.setMap(null);

				// Clear multiple routes
				for (var i = 0; i < me.directionsRendererArray.length; i++) {
					me.directionsRendererArray[i].setMap(null);
				}
				me.directionsRendererArray = Array();
			};

			// Close all info windows (not for KML layers, just ones added by routing)
			AutocompleteDirectionsHandler.prototype.clearInfoWindows = function() {
				var me = this;
				for (var i = 0; i < me.infoWindows.length; i++) {
					me.infoWindows[i].close();
				}
				me.infoWindows = Array();
			};

			// Clear any manually dropped markers
			AutocompleteDirectionsHandler.prototype.clearDroppedMarkers = function() {
				var me = this;
				// Remove markers from the map (could loop but there are only ever two)
				if (me.markers[0]) me.markers[0].setMap(null);
				if (me.markers[1]) me.markers[1].setMap(null);
			}



			/**
			* Do the routing
			*/
			// Calculate a route using place IDs (or latLng if we have both set)
			AutocompleteDirectionsHandler.prototype.route = function() {
				var me = this;
				var origin = false;
				if (me.originLatLng)  origin = me.originLatLng;
				if (me.originPlaceId) origin = { placeId: me.originPlaceId };

				var destination = false;
				if (me.destinationLatLng)  destination = me.destinationLatLng;
				if (me.destinationPlaceId) destination = { placeId: me.destinationPlaceId };

				if (!origin || !destination) return;
				$m.addClass('erg-loading-routes');
				
				me.directionsService.route({
					origin: origin,
					destination: destination,
					travelMode: me.travelMode,
					unitSystem: google.maps.DirectionsUnitSystem.IMPERIAL,
					provideRouteAlternatives: true, // hardcoded, but we can accept just one route below

				}, function(response, status) {
					if (status === 'OK') {
						// Store the response
						me.directionsResponse = response;

						if (me.directionsResponse.routes.length > 0) {
							me.renderRoutes();
						} else {
							me.clear();
							me.reset();	
							window.alert('Directions request failed (response.routes.length==' + response.routes.length + ')');
						}

					} else {
						me.clear();
						me.reset();
						window.alert('Directions request failed due to ' + status);
					}
				});
			};

			// Get the JSON of the polylines to send to the server
			// Using this, the server can calculate the pollution for each route
			AutocompleteDirectionsHandler.prototype.getPolyLineJsonToSend = function() {
				var me = this;
				var polylineJson = [];
				var routes = me.directionsResponse.routes;
				for (var r = 0; r < routes.length; r++) {
					var polyLineId           = r + 1;
					routes[r].id             = polyLineId;
					polylineJson[r] = {
						id: String(polyLineId),
						format: "google_polyline",
						mode: me.travelMode,
						google_polyline: {
							polyline: routes[r].overview_polyline,
							start_time: new Date().toISOString(),
							// Add the seconds to the route length (*1000 to get milliseconds)
							end_time: new Date(Date.now() + (routes[r].legs[0].duration.value * 1000)).toISOString()
						}
					}
					// polylineJson[r].duration = routes[r].legs[0].duration.value;
				}
				polylineJson = {
					species: ["NO2", "O3", "PM10", "PM25"],
					routes: polylineJson
				};
				me.polylineJson = JSON.stringify(polylineJson);
				// console.log(polylineJson);
			};

			// JSON parse the routes pollution info back from the server
			AutocompleteDirectionsHandler.prototype.parsePolylinesResponse = function() {
				var me = this;
				var googleRoutes = me.directionsResponse.routes;
				console.log('polylinesResponse.routes', me.polylinesResponse.routes);

				// Loop over each route in the polylines response (maximum of three)
				// and add the parsed data back to routes (i.e. me.directionsResponse.routes)
				me.polylinesResponse.routes.forEach((polyRoute, routeIndex) => {
					// console.log(polyRoute);

					// Array of the different species (each contains a segments array)
					var species = polyRoute.results;

					// Get the first species' segments array length for this route
					var segments = species[0].segments;

					// Get the highest values across all species for each step of this route's segments
					var highestValues = segments.map((segment, segementIndex) => {
						var allValues = species.map(thisSpecies => thisSpecies.segments[segementIndex].fractional_nowcast_average);
						var highestValue = Math.max(...allValues) || 0;
						// console.log('allValues', allValues, 'highestValue', highestValue);
						return highestValue;
					});

					// Normalise the highest values (to between 0 and 1)
					var max = Math.max(...highestValues);
					var min = Math.min(...highestValues);
					var highestValuesNormalised = highestValues.map(val => (val - min) / (max - min));
					// console.log('highestValues', highestValues, 'highestValuesNormalised', highestValuesNormalised);

					// Get all the latlng values (just use the first species as all have the same latlngs)
					var latlngs = segments.map(segment => {
						return {
							lat: segment.coordinate.lat,
							lng: segment.coordinate.lng
						}
					});
					// console.log('latlngs', latlngs);

					// Add the parsed data back to the Google route (i.e. me.directionsResponse.routes)
					googleRoutes[routeIndex].parsed_polyline = {
						latlngs: latlngs,
						opacities: highestValuesNormalised,
						response_id: polyRoute.id, // to check we get back routes in the same order we sent them
						fractional_dose: polyRoute.fractional_dose,
						fractional_dose_percent_below_max: polyRoute.fractional_dose_percent_below_max || 0
					}
				});
				// console.log(googleRoutes);
			};

			// Work out which is the lowest, middle and highest pollution routes
			AutocompleteDirectionsHandler.prototype.addPolylineColours = function() {
				var me = this;
				var routes = me.directionsResponse.routes;

				var allDoses = routes.map(route => route.parsed_polyline.fractional_dose);

				// Find the highest and lowest doses
				var highestDose = Math.max(...allDoses);
				var lowestDose = Math.min(...allDoses);

				routes.forEach(route => {
					var pp = route.parsed_polyline;
	
					// Default to middle settings
					pp.title = 'Middle';
					pp.className = 'mid';
					pp.colour = o.private.infowindowrouting.middle; // '#fe994d'; // orange
					pp.rank = 1 // this is fragile

					// Override highest and lowest
					if (pp.fractional_dose === lowestDose) {
						pp.title = 'Lowest';
						pp.className = 'lo';
						pp.colour = o.private.infowindowrouting.low; // '#66a33e'; // green
						pp.rank = 0 // could be done better

					} else if (pp.fractional_dose === highestDose) {
						pp.title = 'Highest';
						pp.className = 'hi';
						pp.colour = o.private.infowindowrouting.high; // '#d80000'; // red
						pp.rank = allDoses.length // this is a bit of a hack

					}
				});
			};

			// NOT IN USE (this doesn't do any pollution lookup)
			// Render multiple routes onto a map
			AutocompleteDirectionsHandler.prototype.renderMultipleRoutesNoPollution = function() {
				// var me = this;
				// for (var i = 0; i < me.directionsResponse.routes.length; i++) {
				//     // Setup the styling for the manually rendered routes
				//     var rendererOptions = {
				//         draggable: true,
				//         suppressMarkers: false,
				//         polylineOptions: {
				//             strokeColor: '#db0000',
				//             strokeWeight: 3,
				//             strokeOpacity: 0.3,
				//         }
				//     };
				//     // Is this the main route?
				//     if (i === 0) {
				//         rendererOptions.polylineOptions.strokeColor = '#64a437';
				//         rendererOptions.polylineOptions.strokeWeight = 7;
				//         rendererOptions.polylineOptions.strokeOpacity = 1.0;
				//     }
				//     // Create new renderer object
				//     me.directionsRendererArray[i] = new google.maps.DirectionsRenderer(rendererOptions);
				//     // Call methods to render the directions
				//     me.directionsRendererArray[i].setMap(me.map);
				//     me.directionsRendererArray[i].setDirections(me.directionsResponse);
				//     me.directionsRendererArray[i].setRouteIndex(i);
				// }
			};

			// Render multiple routes onto a map
			AutocompleteDirectionsHandler.prototype.renderMultipleRoutes = function() {
				var me = this;
				var routes = me.directionsResponse.routes;

				me.clear();
				me.routeOnMap = true;
				// console.log(response);

				// Parse the JSON response, and apply pollution info to the routes
				me.parsePolylinesResponse();
				me.addPolylineColours();
				console.log("routes", routes);

				// Colour blender
				// https://stackoverflow.com/a/13542669/2266157
				// Version 4.0
				const pSBC=(p,c0,c1,l)=>{
					let r,g,b,P,f,t,h,i=parseInt,m=Math.round,a=typeof(c1)=="string";
					if(typeof(p)!="number"||p<-1||p>1||typeof(c0)!="string"||(c0[0]!='r'&&c0[0]!='#')||(c1&&!a))return null;
					if(!this.pSBCr)this.pSBCr=(d)=>{
						let n=d.length,x={};
						if(n>9){
							[r,g,b,a]=d=d.split(","),n=d.length;
							if(n<3||n>4)return null;
							x.r=i(r[3]=="a"?r.slice(5):r.slice(4)),x.g=i(g),x.b=i(b),x.a=a?parseFloat(a):-1
						}else{
							if(n==8||n==6||n<4)return null;
							if(n<6)d="#"+d[1]+d[1]+d[2]+d[2]+d[3]+d[3]+(n>4?d[4]+d[4]:"");
							d=i(d.slice(1),16);
							if(n==9||n==5)x.r=d>>24&255,x.g=d>>16&255,x.b=d>>8&255,x.a=m((d&255)/0.255)/1000;
							else x.r=d>>16,x.g=d>>8&255,x.b=d&255,x.a=-1
						}return x};
					h=c0.length>9,h=a?c1.length>9?true:c1=="c"?!h:false:h,f=this.pSBCr(c0),P=p<0,t=c1&&c1!="c"?this.pSBCr(c1):P?{r:0,g:0,b:0,a:-1}:{r:255,g:255,b:255,a:-1},p=P?p*-1:p,P=1-p;
					if(!f||!t)return null;
					if(l)r=m(P*f.r+p*t.r),g=m(P*f.g+p*t.g),b=m(P*f.b+p*t.b);
					else r=m((P*f.r**2+p*t.r**2)**0.5),g=m((P*f.g**2+p*t.g**2)**0.5),b=m((P*f.b**2+p*t.b**2)**0.5);
					a=f.a,t=t.a,f=a>=0||t>=0,a=f?a<0?t:t<0?a:a*P+t*p:0;
					if(h)return"rgb"+(f?"a(":"(")+r+","+g+","+b+(f?","+m(a*1000)/1000:"")+")";
					else return"#"+(4294967296+r*16777216+g*65536+b*256+(f?m(a*255):0)).toString(16).slice(1,f?undefined:-2)
				}

				var allPolylineSegments = 0;
				routes.forEach((route, routeIndex) => {
					pp = route.parsed_polyline;

					for (var i = 0; i < pp.latlngs.length-1; i++) {
						// if (i % 7) { continue; }
						// console.log(pSBC(pp.opacities[i], pp.colour, 'rgb(255,255,255)'))
						me.directionsRendererArray[allPolylineSegments] = new google.maps.Polyline({
							path: [
								pp.latlngs[i],
								pp.latlngs[i+1],
							],
							strokeColor: pp.colour,
							// strokeColor: pSBC(pp.opacities[i], 'rgb(255,255,255)', pp.colour),
							// strokeOpacity: pp.opacities[i],
							strokeOpacity: ((pp.opacities[i] * 0.95) + 0.05),
							// strokeOpacity: 1,
							// strokeWeight: (pp.opacities[i] * 6) + 2,
							strokeWeight: 7,
							map: me.map
						});
						allPolylineSegments++;
					}

					// me.directionsRendererArray[allPolylineSegments] = new google.maps.Polyline({
					// 	path: pp.latlngs,
					// 	// strokeColor: pp.colour,
					// 	strokeColor: pp.opacities.map(fraction => pSBC(fraction, pp.colour, 'rgb(255,255,255)')),
					// 	// strokeOpacity: ((pp.opacities[i] * 4) + 1) / 5,
					// 	strokeOpacity: pp.opacities,
					// 	// strokeOpacity: 1,
					// 	// strokeWeight: (pp.opacities[i] * 6) + 2,
					// 	strokeWeight: 7,
					// 	map: me.map
					// });
					// allPolylineSegments++;

					// Create an info window
					me.infoWindows[routeIndex] = new google.maps.InfoWindow();
					var infoWindowHtml = '<h3 data-pollution="' + pp.title + '" data-classname="' + pp.className + '">' + pp.title + '</h3>';
					if (pp.fractional_dose_percent_below_max) {
						infoWindowHtml += Math.ceil(pp.fractional_dose_percent_below_max * 100) / 100 + '% lower pollution<br/>';
					}
					infoWindowHtml += route.legs[0].distance.text + ' (' + route.legs[0].duration.text + ')<br/>';
					me.infoWindows[routeIndex].setContent(infoWindowHtml);

					// Stagger the InfoWindows across the route
					var steps = route.legs[0].steps;
					var stepCount = steps.length;

					// Default to middle or route
					var stepIdx = parseInt(stepCount * 0.5);
					if (pp.rank === 0) stepIdx = parseInt(stepCount * 0.1);
					if (pp.rank === routes.length) stepIdx = parseInt(stepCount * 0.9);

					// Position the InfoWindow
					me.infoWindows[routeIndex].setPosition(steps[stepIdx].start_location);

					// Open the InfoWindow
					me.infoWindows[routeIndex].open(me.map);

				});

				// Add custom CSS hooks onto InfoWindows
				function addStyles() {
					$(`.gm-style-iw`).each(function() {
						$(this).parent()
							.addClass('custom-iw')
							.addClass('routing-iw')
							.addClass('routing-' + $(this).find('h3').data('classname'));
					});
				}
				// Need to wait for Google to render these, and it's sometimes unreliably slow
				setTimeout(addStyles, 50);
				setTimeout(addStyles, 500);

				// me.setupRouteDragListener();
			};

			// Render the pollution routes and the InfoWindows onto the map
			AutocompleteDirectionsHandler.prototype.renderRoutes = function() {
				var me = this;

				var routes = me.directionsResponse.routes;
				// if (me.haltAsyncMapRender) return;

				// // Setup the default styling
				// var rendererOptions = {
				// 	draggable: true,
				// 	suppressMarkers: false,
				// 	polylineOptions: {
				// 		strokeColor: o.private.infowindowrouting.low,
				// 		strokeWeight: 3,
				// 		strokeOpacity: 0.7,
				// 	}
				// };

				// // If we're only showing one route, then use the default Google route renderer
				// if (routes.length === 1) {
				// 	me.clear();
				// 	i = 0;
				// 	me.directionsRendererArray[i] = new google.maps.DirectionsRenderer(rendererOptions);
				// 	me.directionsRendererArray[i].setMap(me.map);
				// 	me.directionsRendererArray[i].setDirections(me.directionsResponse);
				// 	me.directionsRendererArray[i].setRouteIndex(i);
				// 	me.routeOnMap = true;
				// 	me.setupRouteDragListener();

				// // Are we showing more than one route - if so, render manually
				// } else if (routes.length > 1) {

				$m.addClass('erg-loading-routes');

				// Work out a me.polylineJson from the route
				me.getPolyLineJsonToSend();

				$.ajax({
					'type': 'POST',
					'url': "https://swift-exposure.nw.r.appspot.com/exposure/london/?segments=1&key=15799d0d183e8450724b1c4249988e4f",
					'contentType': 'application/json',
					'data': me.polylineJson,
					'dataType': 'json',
					'success': function (response) {
						me.polylinesResponse = response;
						me.renderMultipleRoutes();
					}
				});

				// }
			}; // end getLowestPollutionRoute method



			// Check to see if any jQuery selectors have been passed in for bespoke UI
			// Remember to add the dot before the thisMapUniqueClass classname!
			// inputFrom and inputTo: must be an <input type="text">
			// travelModeWrap: must contain a <select> or a few <input type="radio">

			// inputFrom
			if (o.routinginputfromselector === undefined) {
				inputFrom = '.' + thisMapUniqueClass + ' .erg-input-origin';
			} else if ($(o.routinginputfromselector).is(':input')) {
				inputFrom = o.routinginputfromselector;
			} else {
				alert('Invalid routing "From" selector: must match an <input> tag');
			}

			// inputTo
			if (o.routinginputtoselector === undefined) {
				inputTo = '.' + thisMapUniqueClass + ' .erg-input-destination';
			} else if ($(o.routinginputfromselector).is(':input')) {
				inputTo = o.routinginputtoselector;
			} else {
				alert('Invalid routing "To" selector: must match an <input> tag');
			}

			// travelModeWrap (must contain a <select> or a few <input type="radio">)
			if (o.routingtravelmodewrap === undefined) {
				travelModeWrap = '.' + thisMapUniqueClass + ' .erg-travel-mode-wrap';
			} else if ($(o.routingtravelmodewrap).find('select').length || $(o.routingtravelmodewrap).find('input[type=radio]').length) {
				travelModeWrap = o.routingtravelmodewrap;
			} else {
				alert('Invalid routing "Travel mode" selector: must contain a <input type="radio"> or a <select>');
			}

			// Initialise the routing UI and autocomplete
			var adh = new AutocompleteDirectionsHandler(googleMap, inputFrom, inputTo, travelModeWrap);

			// Add a method on the plugin to trigger the lookup of
			// the user's location to be used as the from marker
			this.geoDetectFrom = function() {
				adh.addDetectedLocationAsFrom();
			}
		}



		// Increment the unique map key after object is initilised
		ergMapKey++;
		// console.log('ergMapKey', ergMapKey)
	}; // end $.ergMap(); definition



	// Auto initialise ergMap on anything with a '.ergmap' class
	$(document).ready(function() {
		$('.ergmap').ergMap();
	});



	// Debounce jQuery plugin
	// Returns a function, that, as long as it continues to be invoked, will not
	// be triggered. The function will be called after it stops being called for
	// N milliseconds. If `immediate` is passed, trigger the function on the
	// leading edge, instead of the trailing.
	// https://davidwalsh.name/javascript-debounce-function
	$.fn.debounce = function(func, wait, immediate) {
		var timeout;
		// Added a default waiting time of 0.5s
		if (typeof wait === 'undefined') {
			wait = 500;
		};

		return function() {
			var context = this, args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	};















	/**
	 *       And now for some...
	 *       ██╗███████╗    ██████╗ ███████╗██████╗ ███████╗███╗   ██╗██████╗ ███████╗███╗   ██╗ ██████╗██╗███████╗███████╗
	 *       ██║██╔════╝    ██╔══██╗██╔════╝██╔══██╗██╔════╝████╗  ██║██╔══██╗██╔════╝████╗  ██║██╔════╝██║██╔════╝██╔════╝
	 *       ██║███████╗    ██║  ██║█████╗  ██████╔╝█████╗  ██╔██╗ ██║██║  ██║█████╗  ██╔██╗ ██║██║     ██║█████╗  ███████╗
	 *  ██   ██║╚════██║    ██║  ██║██╔══╝  ██╔═══╝ ██╔══╝  ██║╚██╗██║██║  ██║██╔══╝  ██║╚██╗██║██║     ██║██╔══╝  ╚════██║
	 *  ╚█████╔╝███████║    ██████╔╝███████╗██║     ███████╗██║ ╚████║██████╔╝███████╗██║ ╚████║╚██████╗██║███████╗███████║
	 *   ╚════╝ ╚══════╝    ╚═════╝ ╚══════╝╚═╝     ╚══════╝╚═╝  ╚═══╝╚═════╝ ╚══════╝╚═╝  ╚═══╝ ╚═════╝╚═╝╚══════╝╚══════╝
	 *
	 */



	/**
	 * @name MarkerWithLabel for V3
	 * @version 1.1.10 [April 8, 2014]
	 * @author Gary Little (inspired by code from Marc Ridey of Google).
	 * @copyright Copyright 2012 Gary Little [gary at luxcentral.com]
	 * @fileoverview MarkerWithLabel extends the Google Maps JavaScript API V3
	 *  <code>google.maps.Marker</code> class.
	 *  <p>
	 *  MarkerWithLabel allows you to define markers with associated labels. As you would expect,
	 *  if the marker is draggable, so too will be the label. In addition, a marker with a label
	 *  responds to all mouse events in the same manner as a regular marker. It also fires mouse
	 *  events and "property changed" events just as a regular marker would. Version 1.1 adds
	 *  support for the raiseOnDrag feature introduced in API V3.3.
	 *  <p>
	 *  If you drag a marker by its label, you can cancel the drag and return the marker to its
	 *  original position by pressing the <code>Esc</code> key. This doesn't work if you drag the marker
	 *  itself because this feature is not (yet) supported in the <code>google.maps.Marker</code> class.
	 */

	/*!
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *       http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/*jslint browser:true */
	/*global document,google */

	/**
	 * @param {Function} childCtor Child class.
	 * @param {Function} parentCtor Parent class.
	 * @private
	 */
	function inherits(childCtor, parentCtor) {
	  /* @constructor */
	  function tempCtor() {}
	  tempCtor.prototype = parentCtor.prototype;
	  childCtor.superClass_ = parentCtor.prototype;
	  childCtor.prototype = new tempCtor();
	  /* @override */
	  childCtor.prototype.constructor = childCtor;
	}

	/**
	 * This constructor creates a label and associates it with a marker.
	 * It is for the private use of the MarkerWithLabel class.
	 * @constructor
	 * @param {Marker} marker The marker with which the label is to be associated.
	 * @param {string} crossURL The URL of the cross image =.
	 * @param {string} handCursor The URL of the hand cursor.
	 * @private
	 */
	function MarkerLabel_(marker, crossURL, handCursorURL) {
	  this.marker_ = marker;
	  this.handCursorURL_ = marker.handCursorURL;

	  this.labelDiv_ = document.createElement("div");
	  this.labelDiv_.style.cssText = "position: absolute; overflow: hidden;";

	  // Get the DIV for the "X" to be displayed when the marker is raised.
	  this.crossDiv_ = MarkerLabel_.getSharedCross(crossURL);
	}

	inherits(MarkerLabel_, google.maps.OverlayView);

	/**
	 * Returns the DIV for the cross used when dragging a marker when the
	 * raiseOnDrag parameter set to true. One cross is shared with all markers.
	 * @param {string} crossURL The URL of the cross image =.
	 * @private
	 */
	MarkerLabel_.getSharedCross = function (crossURL) {
	  var div;
	  if (typeof MarkerLabel_.getSharedCross.crossDiv === "undefined") {
		div = document.createElement("img");
		div.style.cssText = "position: absolute; z-index: 1000002; display: none;";
		// Hopefully Google never changes the standard "X" attributes:
		div.style.marginLeft = "-8px";
		div.style.marginTop = "-9px";
		div.src = crossURL;
		MarkerLabel_.getSharedCross.crossDiv = div;
	  }
	  return MarkerLabel_.getSharedCross.crossDiv;
	};

	/**
	 * Adds the DIV representing the label to the DOM. This method is called
	 * automatically when the marker's <code>setMap</code> method is called.
	 * @private
	 */
	MarkerLabel_.prototype.onAdd = function () {
	  var me = this;
	  var cMouseIsDown = false;
	  var cDraggingLabel = false;
	  var cSavedZIndex;
	  var cLatOffset, cLngOffset;
	  var cIgnoreClick;
	  var cRaiseEnabled;
	  var cStartPosition;
	  var cStartCenter;
	  // Constants:
	  var cRaiseOffset = 20;
	  var cDraggingCursor = "url(" + this.handCursorURL_ + ")";

	  // Stops all processing of an event.
	  //
	  var cAbortEvent = function (e) {
		if (e.preventDefault) {
		  e.preventDefault();
		}
		e.cancelBubble = true;
		if (e.stopPropagation) {
		  e.stopPropagation();
		}
	  };

	  var cStopBounce = function () {
		me.marker_.setAnimation(null);
	  };

	  this.getPanes().overlayMouseTarget.appendChild(this.labelDiv_);
	  // One cross is shared with all markers, so only add it once:
	  if (typeof MarkerLabel_.getSharedCross.processed === "undefined") {
		this.getPanes().overlayMouseTarget.appendChild(this.crossDiv_);
		MarkerLabel_.getSharedCross.processed = true;
	  }

	  this.listeners_ = [
		google.maps.event.addDomListener(this.labelDiv_, "mouseover", function (e) {
		  if (me.marker_.getDraggable() || me.marker_.getClickable()) {
			this.style.cursor = "pointer";
			google.maps.event.trigger(me.marker_, "mouseover", e);
		  }
		}),
		google.maps.event.addDomListener(this.labelDiv_, "mouseout", function (e) {
		  if ((me.marker_.getDraggable() || me.marker_.getClickable()) && !cDraggingLabel) {
			this.style.cursor = me.marker_.getCursor();
			google.maps.event.trigger(me.marker_, "mouseout", e);
		  }
		}),
		google.maps.event.addDomListener(this.labelDiv_, "mousedown", function (e) {
		  cDraggingLabel = false;
		  if (me.marker_.getDraggable()) {
			cMouseIsDown = true;
			this.style.cursor = cDraggingCursor;
		  }
		  if (me.marker_.getDraggable() || me.marker_.getClickable()) {
			google.maps.event.trigger(me.marker_, "mousedown", e);
			cAbortEvent(e); // Prevent map pan when starting a drag on a label
		  }
		}),
		google.maps.event.addDomListener(document, "mouseup", function (mEvent) {
		  var position;
		  if (cMouseIsDown) {
			cMouseIsDown = false;
			me.eventDiv_.style.cursor = "pointer";
			google.maps.event.trigger(me.marker_, "mouseup", mEvent);
		  }
		  if (cDraggingLabel) {
			if (cRaiseEnabled) { // Lower the marker & label
			  position = me.getProjection().fromLatLngToDivPixel(me.marker_.getPosition());
			  position.y += cRaiseOffset;
			  me.marker_.setPosition(me.getProjection().fromDivPixelToLatLng(position));
			  // This is not the same bouncing style as when the marker portion is dragged,
			  // but it will have to do:
			  try { // Will fail if running Google Maps API earlier than V3.3
				me.marker_.setAnimation(google.maps.Animation.BOUNCE);
				setTimeout(cStopBounce, 1406);
			  } catch (e) {}
			}
			me.crossDiv_.style.display = "none";
			me.marker_.setZIndex(cSavedZIndex);
			cIgnoreClick = true; // Set flag to ignore the click event reported after a label drag
			cDraggingLabel = false;
			mEvent.latLng = me.marker_.getPosition();
			google.maps.event.trigger(me.marker_, "dragend", mEvent);
		  }
		}),
		google.maps.event.addListener(me.marker_.getMap(), "mousemove", function (mEvent) {
		  var position;
		  if (cMouseIsDown) {
			if (cDraggingLabel) {
			  // Change the reported location from the mouse position to the marker position:
			  mEvent.latLng = new google.maps.LatLng(mEvent.latLng.lat() - cLatOffset, mEvent.latLng.lng() - cLngOffset);
			  position = me.getProjection().fromLatLngToDivPixel(mEvent.latLng);
			  if (cRaiseEnabled) {
				me.crossDiv_.style.left = position.x + "px";
				me.crossDiv_.style.top = position.y + "px";
				me.crossDiv_.style.display = "";
				position.y -= cRaiseOffset;
			  }
			  me.marker_.setPosition(me.getProjection().fromDivPixelToLatLng(position));
			  if (cRaiseEnabled) { // Don't raise the veil; this hack needed to make MSIE act properly
				me.eventDiv_.style.top = (position.y + cRaiseOffset) + "px";
			  }
			  google.maps.event.trigger(me.marker_, "drag", mEvent);
			} else {
			  // Calculate offsets from the click point to the marker position:
			  cLatOffset = mEvent.latLng.lat() - me.marker_.getPosition().lat();
			  cLngOffset = mEvent.latLng.lng() - me.marker_.getPosition().lng();
			  cSavedZIndex = me.marker_.getZIndex();
			  cStartPosition = me.marker_.getPosition();
			  cStartCenter = me.marker_.getMap().getCenter();
			  cRaiseEnabled = me.marker_.get("raiseOnDrag");
			  cDraggingLabel = true;
			  me.marker_.setZIndex(1000000); // Moves the marker & label to the foreground during a drag
			  mEvent.latLng = me.marker_.getPosition();
			  google.maps.event.trigger(me.marker_, "dragstart", mEvent);
			}
		  }
		}),
		google.maps.event.addDomListener(document, "keydown", function (e) {
		  if (cDraggingLabel) {
			if (e.keyCode === 27) { // Esc key
			  cRaiseEnabled = false;
			  me.marker_.setPosition(cStartPosition);
			  me.marker_.getMap().setCenter(cStartCenter);
			  google.maps.event.trigger(document, "mouseup", e);
			}
		  }
		}),
		google.maps.event.addDomListener(this.labelDiv_, "click", function (e) {
		  if (me.marker_.getDraggable() || me.marker_.getClickable()) {
			if (cIgnoreClick) { // Ignore the click reported when a label drag ends
			  cIgnoreClick = false;
			} else {
			  google.maps.event.trigger(me.marker_, "click", e);
			  cAbortEvent(e); // Prevent click from being passed on to map
			}
		  }
		}),
		google.maps.event.addDomListener(this.labelDiv_, "dblclick", function (e) {
		  if (me.marker_.getDraggable() || me.marker_.getClickable()) {
			google.maps.event.trigger(me.marker_, "dblclick", e);
			cAbortEvent(e); // Prevent map zoom when double-clicking on a label
		  }
		}),
		google.maps.event.addListener(this.marker_, "dragstart", function (mEvent) {
		  if (!cDraggingLabel) {
			cRaiseEnabled = this.get("raiseOnDrag");
		  }
		}),
		google.maps.event.addListener(this.marker_, "drag", function (mEvent) {
		  if (!cDraggingLabel) {
			if (cRaiseEnabled) {
			  me.setPosition(cRaiseOffset);
			  // During a drag, the marker's z-index is temporarily set to 1000000 to
			  // ensure it appears above all other markers. Also set the label's z-index
			  // to 1000000 (plus or minus 1 depending on whether the label is supposed
			  // to be above or below the marker).
			  me.labelDiv_.style.zIndex = 1000000 + (this.get("labelInBackground") ? -1 : +1);
			}
		  }
		}),
		google.maps.event.addListener(this.marker_, "dragend", function (mEvent) {
		  if (!cDraggingLabel) {
			if (cRaiseEnabled) {
			  me.setPosition(0); // Also restores z-index of label
			}
		  }
		}),
		google.maps.event.addListener(this.marker_, "position_changed", function () {
		  me.setPosition();
		}),
		google.maps.event.addListener(this.marker_, "zindex_changed", function () {
		  me.setZIndex();
		}),
		google.maps.event.addListener(this.marker_, "visible_changed", function () {
		  me.setVisible();
		}),
		google.maps.event.addListener(this.marker_, "labelvisible_changed", function () {
		  me.setVisible();
		}),
		google.maps.event.addListener(this.marker_, "title_changed", function () {
		  me.setTitle();
		}),
		google.maps.event.addListener(this.marker_, "labelcontent_changed", function () {
		  me.setContent();
		}),
		google.maps.event.addListener(this.marker_, "labelanchor_changed", function () {
		  me.setAnchor();
		}),
		google.maps.event.addListener(this.marker_, "labelclass_changed", function () {
		  me.setStyles();
		}),
		google.maps.event.addListener(this.marker_, "labelstyle_changed", function () {
		  me.setStyles();
		})
	  ];
	};

	/**
	 * Removes the DIV for the label from the DOM. It also removes all event handlers.
	 * This method is called automatically when the marker's <code>setMap(null)</code>
	 * method is called.
	 * @private
	 */
	MarkerLabel_.prototype.onRemove = function () {
	  var i;
	  this.labelDiv_.parentNode.removeChild(this.labelDiv_);

	  // Remove event listeners:
	  for (i = 0; i < this.listeners_.length; i++) {
		google.maps.event.removeListener(this.listeners_[i]);
	  }
	};

	/**
	 * Draws the label on the map.
	 * @private
	 */
	MarkerLabel_.prototype.draw = function () {
	  this.setContent();
	  this.setTitle();
	  this.setStyles();
	};

	/**
	 * Sets the content of the label.
	 * The content can be plain text or an HTML DOM node.
	 * @private
	 */
	MarkerLabel_.prototype.setContent = function () {
	  var content = this.marker_.get("labelContent");
	  if (typeof content.nodeType === "undefined") {
		this.labelDiv_.innerHTML = content;
	  } else {
		this.labelDiv_.innerHTML = ""; // Remove current content
		this.labelDiv_.appendChild(content);
	  }
	};

	/**
	 * Sets the content of the tool tip for the label. It is
	 * always set to be the same as for the marker itself.
	 * @private
	 */
	MarkerLabel_.prototype.setTitle = function () {
	   this.labelDiv_.title = this.marker_.getTitle() || "";
	};

	/**
	 * Sets the style of the label by setting the style sheet and applying
	 * other specific styles requested.
	 * @private
	 */
	MarkerLabel_.prototype.setStyles = function () {
	  var i, labelStyle;

	  // Apply style values from the style sheet defined in the labelClass parameter:
	  this.labelDiv_.className = this.marker_.get("labelClass");

	  // Clear existing inline style values:
	  this.labelDiv_.style.cssText = "";
	  // Apply style values defined in the labelStyle parameter:
	  labelStyle = this.marker_.get("labelStyle");
	  for (i in labelStyle) {
		if (labelStyle.hasOwnProperty(i)) {
		  this.labelDiv_.style[i] = labelStyle[i];
		}
	  }
	  this.setMandatoryStyles();
	};

	/**
	 * Sets the mandatory styles to the DIV representing the label as well as to the
	 * associated event DIV. This includes setting the DIV position, z-index, and visibility.
	 * @private
	 */
	MarkerLabel_.prototype.setMandatoryStyles = function () {
	  this.labelDiv_.style.position = "absolute";
	  this.labelDiv_.style.overflow = "hidden";
	  // Make sure the opacity setting causes the desired effect on MSIE:
	  if (typeof this.labelDiv_.style.opacity !== "undefined" && this.labelDiv_.style.opacity !== "") {
		this.labelDiv_.style.MsFilter = "\"progid:DXImageTransform.Microsoft.Alpha(opacity=" + (this.labelDiv_.style.opacity * 100) + ")\"";
		this.labelDiv_.style.filter = "alpha(opacity=" + (this.labelDiv_.style.opacity * 100) + ")";
	  }

	  this.setAnchor();
	  this.setPosition(); // This also updates z-index, if necessary.
	  this.setVisible();
	};

	/**
	 * Sets the anchor point of the label.
	 * @private
	 */
	MarkerLabel_.prototype.setAnchor = function () {
	  var anchor = this.marker_.get("labelAnchor");
	  this.labelDiv_.style.marginLeft = -anchor.x + "px";
	  this.labelDiv_.style.marginTop = -anchor.y + "px";
	};

	/**
	 * Sets the position of the label. The z-index is also updated, if necessary.
	 * @private
	 */
	MarkerLabel_.prototype.setPosition = function (yOffset) {
	  var position = this.getProjection().fromLatLngToDivPixel(this.marker_.getPosition());
	  if (typeof yOffset === "undefined") {
		yOffset = 0;
	  }
	  this.labelDiv_.style.left = Math.round(position.x) + "px";
	  this.labelDiv_.style.top = Math.round(position.y - yOffset) + "px";

	  this.setZIndex();
	};

	/**
	 * Sets the z-index of the label. If the marker's z-index property has not been defined, the z-index
	 * of the label is set to the vertical coordinate of the label. This is in keeping with the default
	 * stacking order for Google Maps: markers to the south are in front of markers to the north.
	 * @private
	 */
	MarkerLabel_.prototype.setZIndex = function () {
	  var zAdjust = (this.marker_.get("labelInBackground") ? -1 : +1);
	  if (typeof this.marker_.getZIndex() === "undefined") {
		this.labelDiv_.style.zIndex = parseInt(this.labelDiv_.style.top, 10) + zAdjust;
	  } else {
		this.labelDiv_.style.zIndex = this.marker_.getZIndex() + zAdjust;
	  }
	};

	/**
	 * Sets the visibility of the label. The label is visible only if the marker itself is
	 * visible (i.e., its visible property is true) and the labelVisible property is true.
	 * @private
	 */
	MarkerLabel_.prototype.setVisible = function () {
	  if (this.marker_.get("labelVisible")) {
		this.labelDiv_.style.display = this.marker_.getVisible() ? "block" : "none";
	  } else {
		this.labelDiv_.style.display = "none";
	  }
	};

	/**
	 * @name MarkerWithLabelOptions
	 * @class This class represents the optional parameter passed to the {@link MarkerWithLabel} constructor.
	 *  The properties available are the same as for <code>google.maps.Marker</code> with the addition
	 *  of the properties listed below. To change any of these additional properties after the labeled
	 *  marker has been created, call <code>google.maps.Marker.set(propertyName, propertyValue)</code>.
	 *  <p>
	 *  When any of these properties changes, a property changed event is fired. The names of these
	 *  events are derived from the name of the property and are of the form <code>propertyname_changed</code>.
	 *  For example, if the content of the label changes, a <code>labelcontent_changed</code> event
	 *  is fired.
	 *  <p>
	 * @property {string|Node} [labelContent] The content of the label (plain text or an HTML DOM node).
	 * @property {Point} [labelAnchor] By default, a label is drawn with its anchor point at (0,0) so
	 *  that its top left corner is positioned at the anchor point of the associated marker. Use this
	 *  property to change the anchor point of the label. For example, to center a 50px-wide label
	 *  beneath a marker, specify a <code>labelAnchor</code> of <code>google.maps.Point(25, 0)</code>.
	 *  (Note: x-values increase to the right and y-values increase to the top.)
	 * @property {string} [labelClass] The name of the CSS class defining the styles for the label.
	 *  Note that style values for <code>position</code>, <code>overflow</code>, <code>top</code>,
	 *  <code>left</code>, <code>zIndex</code>, <code>display</code>, <code>marginLeft</code>, and
	 *  <code>marginTop</code> are ignored; these styles are for internal use only.
	 * @property {Object} [labelStyle] An object literal whose properties define specific CSS
	 *  style values to be applied to the label. Style values defined here override those that may
	 *  be defined in the <code>labelClass</code> style sheet. If this property is changed after the
	 *  label has been created, all previously set styles (except those defined in the style sheet)
	 *  are removed from the label before the new style values are applied.
	 *  Note that style values for <code>position</code>, <code>overflow</code>, <code>top</code>,
	 *  <code>left</code>, <code>zIndex</code>, <code>display</code>, <code>marginLeft</code>, and
	 *  <code>marginTop</code> are ignored; these styles are for internal use only.
	 * @property {boolean} [labelInBackground] A flag indicating whether a label that overlaps its
	 *  associated marker should appear in the background (i.e., in a plane below the marker).
	 *  The default is <code>false</code>, which causes the label to appear in the foreground.
	 * @property {boolean} [labelVisible] A flag indicating whether the label is to be visible.
	 *  The default is <code>true</code>. Note that even if <code>labelVisible</code> is
	 *  <code>true</code>, the label will <i>not</i> be visible unless the associated marker is also
	 *  visible (i.e., unless the marker's <code>visible</code> property is <code>true</code>).
	 * @property {boolean} [raiseOnDrag] A flag indicating whether the label and marker are to be
	 *  raised when the marker is dragged. The default is <code>true</code>. If a draggable marker is
	 *  being created and a version of Google Maps API earlier than V3.3 is being used, this property
	 *  must be set to <code>false</code>.
	 * @property {boolean} [optimized] A flag indicating whether rendering is to be optimized for the
	 *  marker. <b>Important: The optimized rendering technique is not supported by MarkerWithLabel,
	 *  so the value of this parameter is always forced to <code>false</code>.
	 * @property {string} [crossImage="http://maps.gstatic.com/intl/en_us/mapfiles/drag_cross_67_16.png"]
	 *  The URL of the cross image to be displayed while dragging a marker.
	 * @property {string} [handCursor="http://maps.gstatic.com/intl/en_us/mapfiles/closedhand_8_8.cur"]
	 *  The URL of the cursor to be displayed while dragging a marker.
	 */
	/**
	 * Creates a MarkerWithLabel with the options specified in {@link MarkerWithLabelOptions}.
	 * @constructor
	 * @param {MarkerWithLabelOptions} [opt_options] The optional parameters.
	 */
	function MarkerWithLabel(opt_options) {
	  opt_options = opt_options || {};
	  opt_options.labelContent = opt_options.labelContent || "";
	  opt_options.labelAnchor = opt_options.labelAnchor || new google.maps.Point(0, 0);
	  opt_options.labelClass = opt_options.labelClass || "markerLabels";
	  opt_options.labelStyle = opt_options.labelStyle || {};
	  opt_options.labelInBackground = opt_options.labelInBackground || false;
	  if (typeof opt_options.labelVisible === "undefined") {
		opt_options.labelVisible = true;
	  }
	  if (typeof opt_options.raiseOnDrag === "undefined") {
		opt_options.raiseOnDrag = true;
	  }
	  if (typeof opt_options.clickable === "undefined") {
		opt_options.clickable = true;
	  }
	  if (typeof opt_options.draggable === "undefined") {
		opt_options.draggable = false;
	  }
	  if (typeof opt_options.optimized === "undefined") {
		opt_options.optimized = false;
	  }
	  opt_options.crossImage = opt_options.crossImage || "http" + (document.location.protocol === "https:" ? "s" : "") + "://maps.gstatic.com/intl/en_us/mapfiles/drag_cross_67_16.png";
	  opt_options.handCursor = opt_options.handCursor || "http" + (document.location.protocol === "https:" ? "s" : "") + "://maps.gstatic.com/intl/en_us/mapfiles/closedhand_8_8.cur";
	  opt_options.optimized = false; // Optimized rendering is not supported

	  this.label = new MarkerLabel_(this, opt_options.crossImage, opt_options.handCursor); // Bind the label to the marker

	  // Call the parent constructor. It calls Marker.setValues to initialize, so all
	  // the new parameters are conveniently saved and can be accessed with get/set.
	  // Marker.set triggers a property changed event (called "propertyname_changed")
	  // that the marker label listens for in order to react to state changes.
	  google.maps.Marker.apply(this, arguments);
	}

	inherits(MarkerWithLabel, google.maps.Marker);

	/**
	 * Overrides the standard Marker setMap function.
	 * @param {Map} theMap The map to which the marker is to be added.
	 * @private
	 */
	MarkerWithLabel.prototype.setMap = function (theMap) {

	  // Call the inherited function...
	  google.maps.Marker.prototype.setMap.apply(this, arguments);

	  // ... then deal with the label:
	  this.label.setMap(theMap);
	};



	// arcgislink.min.js
	(function(){
		function o(n,t,i){var r=t===""?0:n.indexOf(t),u=i===""?n.length:n.indexOf(i,r+t.length);return n.substring(r+t.length,u)}function it(n){return n&&typeof n=="string"}function h(n){return n&&n.splice}function yi(n){return typeof n=="number"}function i(n,t,i){if(n&&t)for(var r in n)!i&&r in t||(t[r]=n[r]);return t}function a(){n.event.trigger.apply(this,arguments)}function v(n,t){n&&t&&t.error&&n(t.error)}function ii(n,t){var i="";return n&&(i+=n.getTime()-n.getTimezoneOffset()*6e4),t&&(i+=", "+(t.getTime()-t.getTimezoneOffset()*6e4)),i}function rt(n,t){if(t=Math.min(Math.max(t,0),1),n){var i=n.style;typeof i.opacity!="undefined"&&(i.opacity=t);typeof i.filters!="undefined"&&(i.filters.alpha.opacity=Math.floor(100*t));typeof i.filter!="undefined"&&(i.filter="alpha(opacity:"+Math.floor(t*100)+")")}}function bt(n){var t="";for(var i in n)n.hasOwnProperty(i)&&(t.length>0&&(t+=";"),t+=i+":"+n[i]);return t}function pi(){if(typeof XMLHttpRequest=="undefined"){try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(n){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(i){}throw new Error("This browser does not support XMLHttpRequest.");}else return new XMLHttpRequest}function at(t){var i=t;return(h(t)&&t.length>0&&(i=t[0]),i instanceof n.LatLng||i instanceof n.Marker)?h(t)&&t.length>1?s.MULTIPOINT:s.POINT:i instanceof n.Polyline?s.POLYLINE:i instanceof n.Polygon?s.POLYGON:i instanceof n.LatLngBounds?s.ENVELOPE:i.x!==undefined&&i.y!==undefined?s.POINT:i.points?s.MULTIPOINT:i.paths?s.POLYLINE:i.rings?s.POLYGON:null}function kt(t){var i=t;return(h(t)&&t.length>0&&(i=t[0]),h(i)&&i.length>0&&(i=i[0]),i instanceof n.LatLng||i instanceof n.Marker||i instanceof n.Polyline||i instanceof n.Polygon||i instanceof n.LatLngBounds)?!0:!1}function ht(n){return n?yi(n)?n:n.wkid?n.wkid:n.toJSON():null}function ri(n,t){for(var i=[],r,u=0,f=n.getLength();u<f;u++)r=n.getAt(u),i.push("["+r.lng()+","+r.lat()+"]");return t&&i.length>0&&i.push("["+n.getAt(0).lng()+","+n.getAt(0).lat()+"]"),i.join(",")}function ut(t){var c=at(t),i,e,r,u,f="{",o;switch(c){case s.POINT:i=h(t)?t[0]:t;i instanceof n.Marker&&(i=i.getPosition());f+="x:"+i.lng()+",y:"+i.lat();break;case s.MULTIPOINT:for(u=[],r=0;r<t.length;r++)i=t[r]instanceof n.Marker?t[r].getPosition():t[r],u.push("["+i.lng()+","+i.lat()+"]");f+="points: ["+u.join(",")+"]";break;case s.POLYLINE:for(u=[],e=h(t)?t:[t],r=0;r<e.length;r++)u.push("["+ri(e[r].getPath())+"]");f+="paths:["+u.join(",")+"]";break;case s.POLYGON:for(u=[],i=h(t)?t[0]:t,o=i.getPaths(),r=0;r<o.getLength();r++)u.push("["+ri(o.getAt(r),!0)+"]");f+="rings:["+u.join(",")+"]";break;case s.ENVELOPE:i=h(t)?t[0]:t;f+="xmin:"+i.getSouthWest().lng()+",ymin:"+i.getSouthWest().lat()+",xmax:"+i.getNorthEast().lng()+",ymax:"+i.getNorthEast().lat()}return f+=", spatialReference:{wkid:4326}",f+"}"}function wi(n){function i(n){for(var i=[],t=0,r=n.length;t<r;t++)i.push("["+n[t][0]+","+n[t][1]+"]");return"["+i.join(",")+"]"}function r(n){for(var r=[],t=0,u=n.length;t<u;t++)r.push(i(n[t]));return"["+r.join(",")+"]"}var t="{";return n.x?t+="x:"+n.x+",y:"+n.y:n.xmin?t+="xmin:"+n.xmin+",ymin:"+n.ymin+",xmax:"+n.xmax+",ymax:"+n.ymax:n.points?t+="points:"+i(n.points):n.paths?t+="paths:"+r(n.paths):n.rings&&(t+="rings:"+r(n.rings)),t+"}"}function dt(t){var i=k[t.spatialReference.wkid||t.spatialReference.wkt],r,u;return i=i||tt,r=i.inverse([t.xmin,t.ymin]),u=i.inverse([t.xmax,t.ymax]),new n.LatLngBounds(new n.LatLng(r[1],r[0]),new n.LatLng(u[1],u[0]))}function ft(t,r){var f=null,u,o,v,s,y,h,e,l,c,a;if(r=r||{},t)if(f=[],t.x)u=new n.Marker(i(r.markerOptions||r,{position:new n.LatLng(t.y,t.x)})),f.push(u);else{if(h=t.points||t.paths||t.rings,!h)return f;for(a=[],o=0,v=h.length;o<v;o++)if(e=h[o],t.points)u=new n.Marker(i(r.markerOptions||r,{position:new n.LatLng(e[1],e[0])})),f.push(u);else{for(c=[],s=0,y=e.length;s<y;s++)l=e[s],c.push(new n.LatLng(l[1],l[0]));t.paths?(u=new n.Polyline(i(r.polylineOptions||r,{path:c})),f.push(u)):t.rings&&a.push(c)}t.rings&&(u=new n.Polygon(i(r.polygonOptions||r,{paths:a})),f.push(u))}return f}function ui(n,t){if(n)for(var r,i=0,u=n.length;i<u;i++)r=n[i],r.geometry&&(r.geometry=ft(r.geometry,t))}function gt(n){var t,i,u,r;if(typeof n=="object"){if(h(n)){for(t=[],i=0,u=n.length;i<u;i++)t.push(gt(n[i]));return"["+t.join(",")+"]"}if(kt(n))return ut(n);if(n.toJSON)return n.toJSON();t="";for(r in n)n.hasOwnProperty(r)&&(t.length>0&&(t+=", "),t+=r+":"+gt(n[r]));return"{"+t+"}"}return n.toString()}function fi(t){for(var i,f=[],r=0,u=t.length;r<u;r++)i=t[r],i instanceof n.Marker&&(i=i.getPosition()),f.push({geometry:{x:i.lng(),y:i.lat(),spatialReference:{wkid:4326}}});return{type:'"features"',features:f,doNotLocateOnRestrictedElements:!1}}function ei(n){var t={},r,u,f,i,e;if(!n)return null;if(r=[],n.geometries&&n.geometries.length>0)for(u=n.geometries[0],f=kt(u),i=0,e=n.geometries.length;i<e;i++)f?r.push(ut(n.geometries[i])):r.push(wi(n.geometries[i]));return n.geometryType||(n.geometryType=at(u)),f?t.inSR=tt.wkid:n.inSpatialReference&&(t.inSR=ht(n.inSpatialReference)),n.outSpatialReference&&(t.outSR=ht(n.outSpatialReference)),t.geometries='{geometryType:"'+n.geometryType+'", geometries:['+r.join(",")+"]}",t}function oi(n){var i="",t,r;if(n){n.f=n.f||"json";for(t in n)n.hasOwnProperty(t)&&n[t]!==null&&n[t]!==undefined&&(r=gt(n[t]),i+=(i.length>0?"&":"")+(t+"="+(escape?escape(r):encodeURIComponent(r))))}return i}function bi(n,t){for(var r=[],i=2,u=arguments.length;i<u;i++)r.push(arguments[i]);return function(){n.apply(t,r)}}function ni(t,i,r){i.hasLoaded()?t.push(i.copyrightText):n.event.addListenerOnce(i,"load",function(){et(r)})}function et(t){var r=null,e,s,o,u,h,c,a,i,f;if(t){if(e=t.controls[n.ControlPosition.BOTTOM_RIGHT],e)for(i=0,f=e.getLength();i<f;i++)if(e.getAt(i).id==="agsCopyrights"){r=e.getAt(i);break}if(r||(r=document.createElement("div"),r.style.fontFamily="Arial,sans-serif",r.style.fontSize="10px",r.style.textAlign="right",r.id="agsCopyrights",t.controls[n.ControlPosition.BOTTOM_RIGHT].push(r),n.event.addListener(t,"maptypeid_changed",function(){et(t)})),s=t.agsOverlays,o=[],s)for(i=0,f=s.getLength();i<f;i++)ni(o,s.getAt(i).mapService_,t);if(h=t.overlayMapTypes,h)for(i=0,f=h.getLength();i<f;i++)if(u=h.getAt(i),u instanceof l)for(c=0,a=u.tileLayers_.length;c<a;c++)ni(o,u.tileLayers_[c].mapService_,t);if(u=t.mapTypes.get(t.getMapTypeId()),u instanceof l){for(i=0,f=u.tileLayers_.length;i<f;i++)ni(o,u.tileLayers_[i].mapService_,t);r.style.color=u.negative?"#ffffff":"#000000"}r.innerHTML=o.join("<br/>")}}function u(n,t,i,r){var f="ags_jsonp_"+vi+++"_"+Math.floor(Math.random()*1e6),e=null,s,h,l,u;if(t=t||{},t[i||"callback"]="ags_jsonp."+f,s=oi(t),h=document.getElementsByTagName("head")[0],!h)throw new Error("document must have header tag");if(l=function(){window.ags_jsonp[f]&&delete window.ags_jsonp[f];e&&h.removeChild(e);e=null;r.apply(null,arguments);a(w,"jsonpend",f)},window.ags_jsonp[f]=l,(s+n).length<2e3&&!st.alwaysUseProxy)e=document.createElement("script"),e.src=n+(n.indexOf("?")===-1?"?":"&")+s,e.id=f,h.appendChild(e);else{var o=window.location,v=o.protocol+"//"+o.hostname+(!o.port||o.port===80?"":":"+o.port+"/"),c=!0;if(n.toLowerCase().indexOf(v.toLowerCase())!==-1&&(c=!1),st.alwaysUseProxy&&(c=!0),c&&!st.proxyUrl)throw new Error("No proxyUrl property in Config is defined");u=pi();u.onreadystatechange=function(){if(u.readyState===4)if(u.status===200)eval(u.responseText);else throw new Error("Error code "+u.status);};u.open("POST",c?st.proxyUrl+"?"+n:n,!0);u.setRequestHeader("Content-Type","application/x-www-form-urlencoded");u.send(s)}return a(w,"jsonpstart",f),f}function r(n){n=n||{};this.wkid=n.wkid;this.wkt=n.wkt}function vt(n){n=n||{};r.call(this,n)}function y(n){var i,u;n=n||{};r.call(this,n);var h=n.inverse_flattening,f=n.standard_parallel_1*t,e=n.standard_parallel_2*t,c=n.latitude_of_origin*t;this.a_=n.semi_major/n.unit;this.lamda0_=n.central_meridian*t;this.FE_=n.false_easting;this.FN_=n.false_northing;i=1/h;u=2*i-i*i;this.e_=Math.sqrt(u);var o=this.calc_m_(f,u),l=this.calc_m_(e,u),a=this.calc_t_(c,this.e_),s=this.calc_t_(f,this.e_),v=this.calc_t_(e,this.e_);this.n_=Math.log(o/l)/Math.log(s/v);this.F_=o/(this.n_*Math.pow(s,this.n_));this.rho0_=this.calc_rho_(this.a_,this.F_,a,this.n_)}function d(n){var u,f,i;n=n||{};r.call(this,n);this.a_=n.semi_major/n.unit;u=n.inverse_flattening;this.k0_=n.scale_factor;f=n.latitude_of_origin*t;this.lamda0_=n.central_meridian*t;this.FE_=n.false_easting;this.FN_=n.false_northing;i=1/u;this.es_=2*i-i*i;this.ep4_=this.es_*this.es_;this.ep6_=this.ep4_*this.es_;this.eas_=this.es_/(1-this.es_);this.M0_=this.calc_m_(f,this.a_,this.es_,this.ep4_,this.ep6_)}function g(n){n=n||{};r.call(this,n);this.a_=(n.semi_major||6378137)/(n.unit||1);this.lamda0_=(n.central_meridian||0)*t}function p(n){var i,u;n=n||{};r.call(this,n);var c=n.inverse_flattening,e=n.standard_parallel_1*t,o=n.standard_parallel_2*t,l=n.latitude_of_origin*t;this.a_=n.semi_major/n.unit;this.lamda0_=n.central_meridian*t;this.FE_=n.false_easting;this.FN_=n.false_northing;i=1/c;u=2*i-i*i;this.e_=Math.sqrt(u);var f=this.calc_m_(e,u),s=this.calc_m_(o,u),h=this.calc_q_(e,this.e_),a=this.calc_q_(o,this.e_),v=this.calc_q_(l,this.e_);this.n_=(f*f-s*s)/(a-h);this.C_=f*f+this.n_*h;this.rho0_=this.calc_rho_(this.a_,this.C_,this.n_,v)}function ki(n){this.url=n;var t=this;u(n,{},"",function(n){i(n,t);a(t,"load")})}function nt(n){this.url=n;this.definition=null}function f(n,t){var i,r;this.url=n;this.loaded_=!1;i=n.split("/");this.name=i[i.length-2].replace(/_/g," ");t=t||{};t.delayLoad?(r=this,window.setTimeout(function(){r.loadServiceInfo()},t.delayLoad*1e3)):this.loadServiceInfo()}function ct(n){this.url=n;this.loaded_=!1;var t=this;u(n,{},"",function(n){t.init_(n)})}function ti(n){this.url=n;this.t="geocodeservice"}function di(n){this.url=n;this.loaded_=!1;var t=this;u(n,{},"",function(n){i(n,t);t.loaded_=!0;a(t,"load")})}function ci(n){this.url=n;this.loaded_=!1;var t=this;u(n,{},"",function(n){i(n,t);t.loaded_=!0;a(t,"load")})}function li(n){this.url=n}function c(t){var r,i;if(this.lods_=t?t.lods:null,this.spatialReference_=t?k[t.spatialReference.wkid||t.spatialReference.wkt]:ot,!this.spatialReference_)throw new Error("unsupported Spatial Reference");if(this.resolution0_=t?t.lods[0].resolution:156543.033928,this.minZoom=Math.floor(Math.log(this.spatialReference_.getCircum()/this.resolution0_/256)/Math.LN2+.5),this.maxZoom=t?this.minZoom+this.lods_.length-1:20,n.Size&&(this.tileSize_=t?new n.Size(t.cols,t.rows):new n.Size(256,256)),this.scale_=Math.pow(2,this.minZoom)*this.resolution0_,this.originX_=t?t.origin.x:-20037508.342787,this.originY_=t?t.origin.y:20037508.342787,t)for(i=0;i<t.lods.length-1;i++)if(r=t.lods[i].resolution/t.lods[i+1].resolution,r>2.001||r<1.999)throw new Error("This type of map cache is not supported in V3. \nScale ratio between zoom levels must be 2");}function b(t,r){var e;if(r=r||{},r.opacity&&(this.opacity_=r.opacity,delete r.opacity),i(r,this),this.mapService_=t instanceof f?t:new f(t),r.hosts){var u=o(this.mapService_.url,"","://"),s=o(this.mapService_.url,"://","/"),h=o(this.mapService_.url,u+"://"+s,"");this.urlTemplate_=u+"://"+r.hosts+h;this.numOfHosts_=parseInt(o(r.hosts,"[","]"),10)}this.name=r.name||this.mapService_.name;this.maxZoom=r.maxZoom||19;this.minZoom=r.minZoom||0;this.dynaZoom=r.dynaZoom||this.maxZoom;this.mapService_.loaded_?this.init_(r):(e=this,n.event.addListenerOnce(this.mapService_,"load",function(){e.init_(r)}));this.tiles_={};this.map_=r.map}function l(t,r){var e,u,o;if(r=r||{},r.opacity&&(this.opacity_=r.opacity,delete r.opacity),i(r,this),u=t,it(t))u=[new b(t,r)];else if(t instanceof f)u=[new b(t,r)];else if(t instanceof b)u=[t];else if(t.length>0&&it(t[0]))for(u=[],e=0;e<t.length;e++)u[e]=new b(t[e],r);if(this.tileLayers_=u,this.tiles_={},r.maxZoom!==undefined)this.maxZoom=r.maxZoom;else{for(o=0,e=0;e<u.length;e++)o=Math.max(o,u[e].maxZoom);this.maxZoom=o}u[0].projection_?(this.tileSize=u[0].projection_.tileSize_,this.projection=u[0].projection_):this.tileSize=new n.Size(256,256);this.name||(this.name=u[0].name)}function e(n,t){t=t||{};this.mapService_=n instanceof f?n:new f(n);this.minZoom=t.minZoom;this.maxZoom=t.maxZoom;this.opacity_=t.opacity||1;this.exportOptions_=t.exportOptions||{};this.drawing_=!1;this.needsNewRefresh_=!1;this.overlay_=null;this.div_=null;t.map&&this.setMap(t.map);this.map_=null;this.listeners_=[]}function lt(n,t,i,r){this.bounds_=n;this.url_=t;this.map_=i;this.div_=null;this.op_=r;this.setMap(i)}function ai(n){this.map_=n;et(n)}var yt=yt||{},t=Math.PI/180,vi=0,s,si,hi;window.ags_jsonp=window.ags_jsonp||{};var n=google.maps,tt,pt,ot,wt,st={proxyUrl:null,alwaysUseProxy:!1},k={},w={};s={POINT:"esriGeometryPoint",MULTIPOINT:"esriGeometryMultipoint",POLYLINE:"esriGeometryPolyline",POLYGON:"esriGeometryPolygon",ENVELOPE:"esriGeometryEnvelope"};w.getJSON=function(n,t,i,r){u(n,t,i,r)};w.addToMap=function(n,t){var i,r,u;if(h(t))for(r=0,u=t.length;r<u;r++)i=t[r],h(i)?w.addToMap(n,i):kt(i)&&i.setMap(n)};w.removeFromMap=function(n,t){w.addToMap(null,n);t&&(n.length=0)};r.prototype.forward=function(n){return n};r.prototype.inverse=function(n){return n};r.prototype.getCircum=function(){return 360};r.prototype.toJSON=function(){return"{"+(this.wkid?" wkid:"+this.wkid:"wkt: '"+this.wkt+"'")+"}"};vt.prototype=new r;y.prototype=new r;y.prototype.calc_m_=function(n,t){var i=Math.sin(n);return Math.cos(n)/Math.sqrt(1-t*i*i)};y.prototype.calc_t_=function(n,t){var i=t*Math.sin(n);return Math.tan(Math.PI/4-n/2)/Math.pow((1-i)/(1+i),t/2)};y.prototype.calc_rho_=function(n,t,i,r){return n*t*Math.pow(i,r)};y.prototype.calc_phi_=function(n,t,i){var r=t*Math.sin(i);return Math.PI/2-2*Math.atan(n*Math.pow((1-r)/(1+r),t/2))};y.prototype.solve_phi_=function(n,t,i){for(var f=0,r=i,u=this.calc_phi_(n,t,r);Math.abs(u-r)>1e-9&&f<10;)f++,r=u,u=this.calc_phi_(n,t,r);return u};y.prototype.forward=function(n){var u=n[1]*t,f=n[0]*t,e=this.calc_t_(u,this.e_),i=this.calc_rho_(this.a_,this.F_,e,this.n_),r=this.n_*(f-this.lamda0_),o=this.FE_+i*Math.sin(r),s=this.FN_+this.rho0_-i*Math.cos(r);return[o,s]};y.prototype.inverse=function(n){var i=n[0]-this.FE_,r=n[1]-this.FN_,f=Math.atan(i/(this.rho0_-r)),e=(this.n_>0?1:-1)*Math.sqrt(i*i+(this.rho0_-r)*(this.rho0_-r)),u=Math.pow(e/(this.a_*this.F_),1/this.n_),o=Math.PI/2-2*Math.atan(u),s=this.solve_phi_(u,this.e_,o),h=f/this.n_+this.lamda0_;return[h/t,s/t]};y.prototype.getCircum=function(){return Math.PI*2*this.a_};d.prototype=new r;d.prototype.calc_m_=function(n,t,i,r,u){return t*((1-i/4-3*r/64-5*u/256)*n-(3*i/8+3*r/32+45*u/1024)*Math.sin(2*n)+(15*r/256+45*u/1024)*Math.sin(4*n)-35*u/3072*Math.sin(6*n))};d.prototype.forward=function(n){var u=n[1]*t,o=n[0]*t,e=this.a_/Math.sqrt(1-this.es_*Math.pow(Math.sin(u),2)),i=Math.pow(Math.tan(u),2),f=this.eas_*Math.pow(Math.cos(u),2),r=(o-this.lamda0_)*Math.cos(u),s=this.calc_m_(u,this.a_,this.es_,this.ep4_,this.ep6_),h=this.FE_+this.k0_*e*(r+(1-i+f)*Math.pow(r,3)/6+(5-18*i+i*i+72*f-58*this.eas_)*Math.pow(r,5)/120),c=this.FN_+this.k0_*(s-this.M0_)+e*Math.tan(u)*(r*r/2+(5-i+9*f+4*f*f)*Math.pow(r,4)/120+(61-58*i+i*i+600*f-330*this.eas_)*Math.pow(r,6)/720);return[h,c]};d.prototype.inverse=function(n){var h=n[0],c=n[1],u=(1-Math.sqrt(1-this.es_))/(1+Math.sqrt(1-this.es_)),l=this.M0_+(c-this.FN_)/this.k0_,o=l/(this.a_*(1-this.es_/4-3*this.ep4_/64-5*this.ep6_/256)),f=o+(3*u/2-27*Math.pow(u,3)/32)*Math.sin(2*o)+(21*u*u/16-55*Math.pow(u,4)/32)*Math.sin(4*o)+151*Math.pow(u,3)/6*Math.sin(6*o)+1097*Math.pow(u,4)/512*Math.sin(8*o),i=this.eas_*Math.pow(Math.cos(f),2),r=Math.pow(Math.tan(f),2),s=this.a_/Math.sqrt(1-this.es_*Math.pow(Math.sin(f),2)),a=this.a_*(1-this.es_)/Math.pow(1-this.es_*Math.pow(Math.sin(f),2),3/2),e=(h-this.FE_)/(s*this.k0_),v=f-s*Math.tan(f)/a*(e*e/2-(5+3*r+10*i-4*i*i-9*this.eas_)*Math.pow(e,4)/24+(61+90*r+28*i+45*r*r-252*this.eas_-3*i*i)*Math.pow(e,6)/720),y=this.lamda0_+(e-(1+2*r+i)*Math.pow(e,3)/6+(5-2*i+28*r-3*i*i+8*this.eas_+24*r*r)*Math.pow(e,5)/120)/Math.cos(f);return[y/t,v/t]};d.prototype.getCircum=function(){return Math.PI*2*this.a_};g.prototype=new r;g.prototype.forward=function(n){var i=n[1]*t,r=n[0]*t,u=this.a_*(r-this.lamda0_),f=this.a_/2*Math.log((1+Math.sin(i))/(1-Math.sin(i)));return[u,f]};g.prototype.inverse=function(n){var i=n[0],r=n[1],u=Math.PI/2-2*Math.atan(Math.exp(-r/this.a_)),f=i/this.a_+this.lamda0_;return[f/t,u/t]};g.prototype.getCircum=function(){return Math.PI*2*this.a_};p.prototype=new r;p.prototype.calc_m_=function(n,t){var i=Math.sin(n);return Math.cos(n)/Math.sqrt(1-t*i*i)};p.prototype.calc_q_=function(n,t){var i=t*Math.sin(n);return(1-t*t)*(Math.sin(n)/(1-i*i)-1/(2*t)*Math.log((1-i)/(1+i)))};p.prototype.calc_rho_=function(n,t,i,r){return n*Math.sqrt(t-i*r)/i};p.prototype.calc_phi_=function(n,t,i){var r=t*Math.sin(i);return i+(1-r*r)*(1-r*r)/(2*Math.cos(i))*(n/(1-t*t)-Math.sin(i)/(1-r*r)+Math.log((1-r)/(1+r))/(2*t))};p.prototype.solve_phi_=function(n,t,i){for(var f=0,r=i,u=this.calc_phi_(n,t,r);Math.abs(u-r)>1e-8&&f<10;)f++,r=u,u=this.calc_phi_(n,t,r);return u};p.prototype.forward=function(n){var u=n[1]*t,f=n[0]*t,e=this.calc_q_(u,this.e_),i=this.calc_rho_(this.a_,this.C_,this.n_,e),r=this.n_*(f-this.lamda0_),o=this.FE_+i*Math.sin(r),s=this.FN_+this.rho0_-i*Math.cos(r);return[o,s]};p.prototype.inverse=function(n){var i=n[0]-this.FE_,r=n[1]-this.FN_,f=Math.sqrt(i*i+(this.rho0_-r)*(this.rho0_-r)),u=this.n_>0?1:-1,o=Math.atan(u*i/(u*this.rho0_-u*r)),e=(this.C_-f*f*this.n_*this.n_/(this.a_*this.a_))/this.n_,s=Math.asin(e/2),h=this.solve_phi_(e,this.e_,s),c=o/this.n_+this.lamda0_;return[c/t,h/t]};p.prototype.getCircum=function(){return Math.PI*2*this.a_};p.prototype.getCircum=function(){return Math.PI*2*this.a_};tt=new vt({wkid:4326});pt=new vt({wkid:4269});ot=new g({wkid:102113,semi_major:6378137,central_meridian:0,unit:1});wt=new g({wkid:102100,semi_major:6378137,central_meridian:0,unit:1});k={"4326":tt,"4269":pt,"102113":ot,"102100":wt};r.WGS84=tt;r.NAD83=pt;r.WEB_MERCATOR=ot;r.WEB_MERCATOR_AUX=wt;w.registerSR=function(n,t){var f=k[""+n],u,i,e,s;if(f)return f;if(t instanceof r)k[""+n]=t,f=t;else{u=t||n;i={wkt:n};n===parseInt(n,10)&&(i={wkid:n});e=o(u,'PROJECTION["','"]');s=o(u,"SPHEROID[","]").split(",");e!==""&&(i.unit=parseFloat(o(o(u,"PROJECTION",""),"UNIT[","]").split(",")[1]),i.semi_major=parseFloat(s[1]),i.inverse_flattening=parseFloat(s[2]),i.latitude_of_origin=parseFloat(o(u,'"Latitude_Of_Origin",',"]")),i.central_meridian=parseFloat(o(u,'"Central_Meridian",',"]")),i.false_easting=parseFloat(o(u,'"False_Easting",',"]")),i.false_northing=parseFloat(o(u,'"False_Northing",',"]")));switch(e){case"":f=new r(i);break;case"Lambert_Conformal_Conic":i.standard_parallel_1=parseFloat(o(u,'"Standard_Parallel_1",',"]"));i.standard_parallel_2=parseFloat(o(u,'"Standard_Parallel_2",',"]"));f=new y(i);break;case"Transverse_Mercator":i.scale_factor=parseFloat(o(u,'"Scale_Factor",',"]"));f=new d(i);break;case"Albers":i.standard_parallel_1=parseFloat(o(u,'"Standard_Parallel_1",',"]"));i.standard_parallel_2=parseFloat(o(u,'"Standard_Parallel_2",',"]"));f=new p(i);break;default:f=new r(i)}f&&(k[""+n]=f)}return f};nt.prototype.load=function(){var n=this;this.loaded_||u(this.url,{},"",function(t){i(t,n);n.loaded_=!0;a(n,"load")})};nt.prototype.isInScale=function(n){return this.maxScale&&this.maxScale>n?!1:this.minScale&&this.minScale<n?!1:!0};si={INTERSECTS:"esriSpatialRelIntersects",CONTAINS:"esriSpatialRelContains",CROSSES:"esriSpatialRelCrosses",ENVELOPE_INTERSECTS:"esriSpatialRelEnvelopeIntersects",INDEX_INTERSECTS:"esriSpatialRelIndexIntersects",OVERLAPS:"esriSpatialRelOverlaps",TOUCHES:"esriSpatialRelTouches",WITHIN:"esriSpatialRelWithin"};nt.prototype.query=function(n,t,r){if(n){var f=i(n,{});n.geometry&&!it(n.geometry)&&(f.geometry=ut(n.geometry),f.geometryType=at(n.geometry),f.inSR=4326);n.spatialRelationship&&(f.spatialRel=n.spatialRelationship,delete f.spatialRelationship);n.outFields&&h(n.outFields)&&(f.outFields=n.outFields.join(","));n.objectIds&&(f.objectIds=n.objectIds.join(","));n.time&&(f.time=ii(n.time,n.endTime));f.outSR=4326;f.returnGeometry=n.returnGeometry===!1?!1:!0;f.returnIdsOnly=n.returnIdsOnly===!0?!0:!1;delete f.overlayOptions;u(this.url+"/query",f,"",function(i){ui(i.features,n.overlayOptions);t(i,i.error);v(r,i)})}};nt.prototype.queryRelatedRecords=function(n,t,r){if(n){var f=i(n,{});f.f=f.f||"json";f.outFields&&!it(f.outFields)&&(f.outFields=f.outFields.join(","));f.returnGeometry=f.returnGeometry===!1?!1:!0;u(this.url+"/query",f,"",function(n){v(r,n);t(n)})}};f.prototype.loadServiceInfo=function(){var n=this;u(this.url,{},"",function(t){n.init_(t)})};f.prototype.init_=function(n){var t=this;if(n.error)throw new Error(n.error.message);i(n,this);this.spatialReference=n.spatialReference.wkt?w.registerSR(n.spatialReference.wkt):k[n.spatialReference.wkid];n.tables!==undefined?u(this.url+"/layers",{},"",function(n){t.initLayers_(n);u(t.url+"/legend",{},"",function(n){t.initLegend_(n);t.setLoaded_()})}):(t.initLayers_(n),t.setLoaded_())};f.prototype.setLoaded_=function(){this.loaded_=!0;a(this,"load")};f.prototype.initLayers_=function(n){var e=[],h=[],t,r,u,f,o,c,s;for(this.layers=e,n.tables&&(this.tables=h),r=0,u=n.layers.length;r<u;r++)f=n.layers[r],t=new nt(this.url+"/"+f.id),i(f,t),t.visible=t.defaultVisibility,e.push(t);if(n.tables)for(r=0,u=n.tables.length;r<u;r++)f=n.tables[r],t=new nt(this.url+"/"+f.id),i(f,t),h.push(t);for(r=0,u=e.length;r<u;r++)if(t=e[r],t.subLayerIds)for(t.subLayers=[],o=0,c=t.subLayerIds.length;o<c;o++)s=this.getLayer(t.subLayerIds[o]),t.subLayers.push(s),s.parentLayer=t};f.prototype.initLegend_=function(n){var e=this.layers,u,t,f,r;if(n.layers)for(t=0,f=n.layers.length;t<f;t++)r=n.layers[t],u=e[r.layerId],i(r,u)};f.prototype.getLayer=function(n){var i=this.layers,t,r;if(i)for(t=0,r=i.length;t<r;t++)if(n===i[t].id||it(n)&&i[t].name.toLowerCase()===n.toLowerCase())return i[t];return null};f.prototype.getLayerDefs_=function(){var i={},n,r,t;if(this.layers)for(n=0,r=this.layers.length;n<r;n++)t=this.layers[n],t.definition&&(i[String(t.id)]=t.definition);return i};f.prototype.hasLoaded=function(){return this.loaded_};f.prototype.getVisibleLayerIds_=function(){var u=[],n,t,i,r,f;if(this.layers){for(t=0,i=this.layers.length;t<i;t++)if(n=this.layers[t],n.subLayers)for(r=0,f=n.subLayers.length;r<f;r++)if(n.subLayers[r].visible===!1){n.visible=!1;break}for(t=0,i=this.layers.length;t<i;t++)(n=this.layers[t],n.subLayers&&n.subLayers.length>0)||n.visible===!0&&u.push(n.id)}return u};f.prototype.getInitialBounds=function(){return this.initialExtent?(this.initBounds_=this.initBounds_||dt(this.initialExtent),this.initBounds_):null};f.prototype.getFullBounds=function(){return this.fullExtent?(this.fullBounds_=this.fullBounds_||dt(this.fullExtent),this.fullBounds_):null};f.prototype.exportMap=function(n,t,i){var r,s,f,c;if(n&&n.bounds){r={};r.f=n.f;var e=n.bounds,o=e.getSouthWest().lng(),h=e.getNorthEast().lng();if(o>h&&(o=o-180),r.bbox=""+o+","+e.getSouthWest().lat()+","+h+","+e.getNorthEast().lat(),r.size=""+n.width+","+n.height,r.dpi=n.dpi,n.imageSR&&(r.imageSR=n.imageSR.wkid?n.imageSR.wkid:"{wkt:"+n.imageSR.wkt+"}"),r.bboxSR="4326",r.format=n.format,s=n.layerDefinitions,s===undefined&&(s=this.getLayerDefs_()),r.layerDefs=bt(s),f=n.layerIds,c=n.layerOption||"show",f===undefined&&(f=this.getVisibleLayerIds_()),f.length>0)r.layers=c+":"+f.join(",");else if(this.loaded_&&t){t({href:null});return}if(r.transparent=n.transparent===!1?!1:!0,n.time&&(r.time=ii(n.time,n.endTime)),r.layerTimeOptions=n.layerTimeOptions,r.f==="image")return this.url+"/export?"+oi(r);u(this.url+"/export",r,"",function(n){n.extent?(n.bounds=dt(n.extent),delete n.extent,t(n)):v(i,n.error)})}};f.prototype.identify=function(n,t,i){if(n){var r={};r.geometry=ut(n.geometry);r.geometryType=at(n.geometry);r.mapExtent=ut(n.bounds);r.tolerance=n.tolerance||2;r.sr=4326;r.imageDisplay=""+n.width+","+n.height+","+(n.dpi||96);r.layers=n.layerOption||"all";n.layerIds&&(r.layers+=":"+n.layerIds.join(","));n.layerDefs&&(r.layerDefs=bt(n.layerDefs));r.maxAllowableOffset=n.maxAllowableOffset;r.returnGeometry=n.returnGeometry===!1?!1:!0;u(this.url+"/identify",r,"",function(r){var o=null,f,u,e;if(r.results)for(o=[],f=0;f<r.results.length;f++)u=r.results[f],e=ft(u.geometry,n.overlayOptions),u.feature={geometry:e,attributes:u.attributes},delete u.attributes;t(r);v(i,r)})}};f.prototype.find=function(n,t,r){if(n){var f=i(n,{});n.layerIds&&(f.layers=n.layerIds.join(","),delete f.layerIds);n.searchFields&&(f.searchFields=n.searchFields.join(","));f.contains=n.contains===!1?!1:!0;n.layerDefinitions&&(f.layerDefs=bt(n.layerDefinitions),delete f.layerDefinitions);f.sr=4326;f.returnGeometry=n.returnGeometry===!1?!1:!0;u(this.url+"/find",f,"",function(i){var o=null,f,u,e;if(i.results)for(o=[],f=0;f<i.results.length;f++)u=i.results[f],e=ft(u.geometry,n.overlayOptions),u.feature={geometry:e,attributes:u.attributes},delete u.attributes;t(i);v(r,i)})}};f.prototype.queryLayer=function(n,t,i,r){var u=this.getLayer(n);u&&u.query(t,i,r)};ct.prototype.init_=function(n){i(n,this);n.spatialReference&&(this.spatialReference=k[n.spatialReference.wkid||n.spatialReference.wkt]||tt);this.loaded_=!0;a(this,"load")};ct.prototype.findAddressCandidates=function(t,r,f){var e=i(t,{}),o;e.inputs&&(i(e.inputs,e),delete e.inputs);h(e.outFields)&&(e.outFields=e.outFields.join(","));o=this;u(this.url+"/findAddressCandidates",e,"",function(i){var s,u,h,c,e,l;if(i.candidates)for(h=[],c=0;c<i.candidates.length;c++)s=i.candidates[c],u=s.location,isNaN(u.x)||isNaN(u.y)||(e=[u.x,u.y],l=o.spatialReference,t.outSR&&(l=k[t.outSR]),l&&(e=l.inverse(e)),s.location=new n.LatLng(e[1],e[0]),h[h.length]=s);r({candidates:h});v(f,i)})};ct.prototype.geocode=function(n,t){this.findAddressCandidates(n,t)};ct.prototype.reverseGeocode=function(t,i,r){it(t.location)||(t.location=ut(t.location));t.outSR=4326;var f=this;u(this.url+"/reverseGeocode",t,"",function(t){var u,e;t.location&&(u=t.location,isNaN(u.x)||isNaN(u.y)||(e=[u.x,u.y],f.spatialReference&&(e=f.spatialReference.inverse(e)),t.location=new n.LatLng(e[1],e[0])));i(t);v(r,t)})};ti.prototype.project=function(n,t,i){var r=ei(n);u(this.url+"/project",r,"callback",function(r){var f=[],u,e;if(n.outSpatialReference===4326||n.outSpatialReference.wkid===4326){for(u=0,e=r.geometries.length;u<e;u++)f.push(ft(r.geometries[u]));r.geometries=f}t(r);v(i,r)})};hi={METER:9001,FOOT:9002,SURVEY_FOOT:9003,SURVEY_MILE:9035,KILLOMETER:9036,RADIAN:9101,DEGREE:9102};ti.prototype.buffer=function(n,t,i){var r=ei(n);n.bufferSpatialReference&&(r.bufferSR=ht(n.bufferSpatialReference));r.outSR=4326;r.distances=n.distances.join(",");n.unit&&(r.unit=n.unit);u(this.url+"/buffer",r,"callback",function(r){var f=[],u,e;if(r.geometries)for(u=0,e=r.geometries.length;u<e;u++)f.push(ft(r.geometries[u],n.overlayOptions));r.geometries=f;t(r);v(i,r)})};ci.prototype.execute=function(n,t,r){var f={};n.parameters&&i(n.parameters,f);f["env:outSR"]=n.outSpatialReference?ht(n.outSpatialReference):4326;n.processSpatialReference&&(f["env:processSR"]=ht(n.processSpatialReference));u(this.url+"/execute",f,"",function(i){var u,f,e,o,s;if(i.results)for(e=0;e<i.results.length;e++)if(u=i.results[e],u.dataType==="GPFeatureRecordSetLayer")for(o=0,s=u.value.features.length;o<s;o++)f=u.value.features[o],f.geometry&&(f.geometry=ft(f.geometry,n.overlayOptions));t(i);v(r,i)})};li.prototype.solve=function(n,t,r){if(n){var f=i(n,{});h(n.stops)&&(f.stops=fi(n.stops));h(n.barriers)&&(n.barriers.length>0?f.barriers=fi(n.barriers):delete f.barriers);f.returnRoutes=n.returnRoutes===!1?!1:!0;f.returnDirections=n.returnDirections===!0?!0:!1;f.returnBarriers=n.returnBarriers===!0?!0:!1;f.returnStops=n.returnStops===!0?!0:!1;u(this.url+"/solve",f,"",function(i){i.routes&&ui(i.routes.features,n.overlayOptions);t(i);v(r,i)})}};c.prototype.fromLatLngToPoint=function(t,i){if(!t||isNaN(t.lat())||isNaN(t.lng()))return null;var u=this.spatialReference_.forward([t.lng(),t.lat()]),r=i||new n.Point(0,0);return r.x=(u[0]-this.originX_)/this.scale_,r.y=(this.originY_-u[1])/this.scale_,r};c.prototype.fromLatLngToPoint=c.prototype.fromLatLngToPoint;c.prototype.fromPointToLatLng=function(t){if(t===null)return null;var r=t.x*this.scale_+this.originX_,u=this.originY_-t.y*this.scale_,i=this.spatialReference_.inverse([r,u]);return new n.LatLng(i[1],i[0])};c.prototype.getScale=function(n){var t=n-this.minZoom,i=0;return this.lods_[t]&&(i=this.lods_[t].scale),i};c.WEB_MECATOR=new c;b.prototype.init_=function(n){this.mapService_.tileInfo&&(this.projection_=new c(this.mapService_.tileInfo),this.minZoom=n.minZoom||this.projection_.minZoom,this.maxZoom=n.maxZoom||this.projection_.maxZoom)};b.prototype.getTileUrl=function(t,i){var h=i-(this.projection_?this.projection_.minZoom:this.minZoom),o="",s,r,u;if(!isNaN(t.x)&&!isNaN(t.y)&&h>=0&&t.x>=0&&t.y>=0){s=this.mapService_.url;this.urlTemplate_&&(s=this.urlTemplate_.replace("["+this.numOfHosts_+"]",""+(t.y+t.x)%this.numOfHosts_));r=this.projection_||(this.map_?this.map_.getProjection():c.WEB_MECATOR);!r instanceof c&&(r=c.WEB_MECATOR);var f=r.tileSize_,e=1<<i,v=new n.Point(t.x*f.width/e,(t.y+1)*f.height/e),y=new n.Point((t.x+1)*f.width/e,t.y*f.height/e),l=new n.LatLngBounds(r.fromPointToLatLng(v),r.fromPointToLatLng(y)),a=this.mapService_.getFullBounds();this.mapService_.singleFusedMapCache===!1||i>this.dynaZoom?(u={f:"image"},u.bounds=l,u.format="png32",u.width=f.width,u.height=f.height,u.imageSR=r.spatialReference_,o=this.mapService_.exportMap(u)):o=a&&!a.intersects(l)?"":s+"/tile/"+h+"/"+t.y+"/"+t.x}return o};b.prototype.setOpacity=function(n){var t,i;this.opacity_=n;t=this.tiles_;for(i in t)t.hasOwnProperty(i)&&rt(t[i],n)};b.prototype.getOpacity=function(){return this.opacity_};b.prototype.getMapService=function(){return this.mapService_};l.prototype.getTile=function(n,t,i){for(var u,e,r,f=i.createElement("div"),o="_"+n.x+"_"+n.y+"_"+t,s=0;s<this.tileLayers_.length;s++)u=this.tileLayers_[s],t<=u.maxZoom&&t>=u.minZoom&&(e=u.getTileUrl(n,t),e&&(r=i.createElement(document.all?"img":"div"),r.style.border="0px none",r.style.margin="0px",r.style.padding="0px",r.style.overflow="hidden",r.style.position="absolute",r.style.top="0px",r.style.left="0px",r.style.width=""+this.tileSize.width+"px",r.style.height=""+this.tileSize.height+"px",document.all?r.src=e:r.style.backgroundImage="url("+e+")",f.appendChild(r),u.tiles_[o]=r,u.opacity_!==undefined?rt(r,u.opacity_):this.opacity_!==undefined&&rt(r,this.opacity_)));return this.tiles_[o]=f,f.setAttribute("tid",o),f};l.prototype.getTile=l.prototype.getTile;l.prototype.releaseTile=function(n){var t,i,r;if(n.getAttribute("tid"))for(t=n.getAttribute("tid"),this.tiles_[t]&&delete this.tiles_[t],i=0;i<this.tileLayers_.length;i++)r=this.tileLayers_[i],r.tiles_[t]&&delete r.tiles_[t]};l.prototype.releaseTile=l.prototype.releaseTile;l.prototype.setOpacity=function(n){var t,r,u,i;this.opacity_=n;t=this.tiles_;for(r in t)if(t.hasOwnProperty(r))for(u=t[r].childNodes,i=0;i<u.length;i++)rt(u[i],n)};l.prototype.getOpacity=function(){return this.opacity_};l.prototype.getTileLayers=function(){return this.tileLayers_};e.prototype=new n.OverlayView;e.prototype.onAdd=function(){var i=this,t;this.listeners_.push(n.event.addListener(this.getMap(),"bounds_changed",bi(this.refresh,this)));this.listeners_.push(n.event.addListener(this.getMap(),"dragstart",function(){i.dragging=!0}));this.listeners_.push(n.event.addListener(this.getMap(),"dragend",function(){i.dragging=!1}));t=this.getMap();t.agsOverlays=t.agsOverlays||new n.MVCArray;t.agsOverlays.push(this);et(t);this.map_=t};e.prototype.onAdd=e.prototype.onAdd;e.prototype.onRemove=function(){for(var r,i,f,t=0,u=this.listeners_.length;t<u;t++)n.event.removeListener(this.listeners_[t]);if(this.overlay_&&this.overlay_.setMap(null),r=this.map_,i=r.agsOverlays,i)for(t=0,f=i.getLength();t<f;t++)if(i.getAt(t)==this){i.removeAt(t);break}et(r);this.map_=null};e.prototype.onRemove=e.prototype.onRemove;e.prototype.draw=function(){this.drawing_&&this.needsNewRefresh_!==!0||this.refresh()};e.prototype.draw=e.prototype.draw;e.prototype.getOpacity=function(){return this.opacity_};e.prototype.setOpacity=function(n){var t=Math.min(Math.max(n,0),1);this.opacity_=t;this.overlay_&&rt(this.overlay_.div_,t)};e.prototype.getMapService=function(){return this.mapService_};e.prototype.refresh=function(){var i,f,t,e,r,u,n;if(this.drawing_===!0){this.needsNewRefresh_=!0;return}(i=this.getMap(),f=i?i.getBounds():null,f)&&(t=this.exportOptions_,t.bounds=f,e=ot,r=i.getDiv(),t.width=r.offsetWidth,t.height=r.offsetHeight,r.offsetWidth!=0&&r.offsetHeight!=0)&&(u=i.getProjection(),u&&u instanceof c&&(e=u.spatialReference_),t.imageSR=e,a(this,"drawstart"),n=this,this.drawing_=!0,!this.dragging&&this.overlay_&&(this.overlay_.setMap(null),this.overlay_=null),this.mapService_.exportMap(t,function(t){if(n.drawing_=!1,n.needsNewRefresh_===!0){n.needsNewRefresh_=!1;n.refresh();return}t.href&&(n.overlay_&&(n.overlay_.setMap(null),n.overlay_=null),n.overlay_=new lt(t.bounds,t.href,n.map_,n.opacity_));a(n,"drawend")}))};e.prototype.isHidden=function(){return!(this.visible_&&this.isInZoomRange_())};e.prototype.isInZoomRange_=function(){var n=this.getMap().getZoom();return this.minZoom!==undefined&&n<this.minZoom||this.maxZoom!==undefined&&n>this.maxZoom?!1:!0};e.prototype.show=function(){this.visible_=!0;this.div_.style.visibility="visible";this.refresh()};e.prototype.hide=function(){this.visible_=!1;this.div_.style.visibility="hidden"};lt.prototype=new n.OverlayView;lt.prototype.onAdd=function(){var n=document.createElement("DIV"),t,i;n.style.border="none";n.style.borderWidth="0px";n.style.position="absolute";t=this.map_.getDiv();n.style.width=t.offsetWidth+"px";n.style.height=t.offsetHeight+"px";n.style.backgroundImage="url("+this.url_+")";this.div_=n;i=this.getPanes();rt(n,this.op_);i.overlayLayer.appendChild(n)};lt.prototype.draw=function(){var n=this.getProjection(),i=n.fromLatLngToDivPixel(this.bounds_.getSouthWest()),r=n.fromLatLngToDivPixel(this.bounds_.getNorthEast()),t=this.div_;t.style.left=i.x+"px";t.style.top=r.y+"px"};lt.prototype.onRemove=function(){this.div_.parentNode.removeChild(this.div_);this.div_=null};ai.prototype.refresh=function(){et(this.map_)};yt.ags={SpatialReference:r,Geographic:vt,LambertConformalConic:y,SphereMercator:g,TransverseMercator:d,SpatialRelationship:si,GeometryType:s,SRUnit:hi,Catalog:ki,MapService:f,Layer:nt,GeocodeService:ct,GeometryService:ti,GPService:di,GPTask:ci,RouteTask:li,Util:w,Config:st,Projection:c,TileLayer:b,MapOverlay:e,MapType:l,CopyrightControl:ai};window.gmaps=yt
	})();



	// extDraggableObject.min.js
	function ExtDraggableObject(n,t){function p(t){n.style.cursor=t?k:d}function y(t,r,e){var s,c;f=Math.round(t);u=Math.round(r);i.intervalX>1&&(s=Math.round(f%i.intervalX),f=s<ut?f-s:f+(i.intervalX-s));i.intervalY>1&&(c=Math.round(u%i.intervalY),u=c<ft?u-c:u+(i.intervalY-c));i.container&&i.container.offsetWidth&&(f=Math.max(0,Math.min(f,i.container.offsetWidth-n.offsetWidth)),u=Math.max(0,Math.min(u,i.container.offsetHeight-n.offsetHeight)));typeof o=="number"&&(f-o>i.toleranceX||o-(f+n.offsetWidth)>i.toleranceX||u-h>i.toleranceY||h-(u+n.offsetHeight)>i.toleranceY)&&(f=a,u=v);i.restrictX||e||(n.style.left=f+"px");i.restrictY||e||(n.style.top=u+"px")}function et(n){var t=n||event;o=b+((t.pageX||t.clientX+document.body.scrollLeft+document.documentElement.scrollLeft)-c);h=w+((t.pageY||t.clientY+document.body.scrollTop+document.documentElement.scrollTop)-l);b=o;w=h;c=t.pageX||t.clientX+document.body.scrollLeft+document.documentElement.scrollLeft;l=t.pageY||t.clientY+document.body.scrollTop+document.documentElement.scrollTop;s&&(y(o,h,g),e.trigger(r,"drag",{mouseX:c,mouseY:l,startLeft:a,startTop:v,event:t}))}function ot(t){var i=t||event;if(p(!0),e.trigger(r,"mousedown",i),n.style.position!=="absolute"){n.style.position="absolute";return}c=i.pageX||i.clientX+document.body.scrollLeft+document.documentElement.scrollLeft;l=i.pageY||i.clientY+document.body.scrollTop+document.documentElement.scrollTop;a=n.offsetLeft;v=n.offsetTop;b=a;w=v;nt=e.addDomListener(tt,"mousemove",et);n.setCapture&&n.setCapture();i.preventDefault?(i.preventDefault(),i.stopPropagation()):(i.cancelBubble=!0,i.returnValue=!1);s=!0;e.trigger(r,"dragstart",{mouseX:c,mouseY:l,startLeft:a,startTop:v,event:i})}function st(t){var i=t||event;s&&(p(!1),e.removeListener(nt),n.releaseCapture&&n.releaseCapture(),s=!1,e.trigger(r,"dragend",{mouseX:c,mouseY:l,startLeft:a,startTop:v,event:i}));o=h=null;e.trigger(r,"mouseup",i)}var r=this,e=window.GEvent||google.maps.Event||google.maps.event,i=t||{},k=i.draggingCursor||"default",d=i.draggableCursor||"default",s=!1,g,o,h,w,b,c,l,u,f,it,rt,nt,a,v,ut=Math.round(i.intervalX/2),ft=Math.round(i.intervalY/2),tt=n.setCapture?n:document;typeof i.intervalX!="number"&&(i.intervalX=1);typeof i.intervalY!="number"&&(i.intervalY=1);typeof i.toleranceX!="number"&&(i.toleranceX=Infinity);typeof i.toleranceY!="number"&&(i.toleranceY=Infinity);it=e.addDomListener(n,"mousedown",ot);rt=e.addDomListener(tt,"mouseup",st);p(!1);i.container;n.style.position="absolute";i.left=i.left||n.offsetLeft;i.top=i.top||n.offsetTop;i.interval=i.interval||1;y(i.left,i.top,!1);r.moveTo=function(n){y(n.x,n.y,!1)};r.moveBy=function(t){y(n.offsetLeft+t.width,n.offsetHeight+t.height,!1)};r.setDraggingCursor=function(n){k=n;p(s)};r.setDraggableCursor=function(n){d=n;p(s)};r.left=function(){return f};r.top=function(){return u};r.valueX=function(){var n=i.intervalX||1;return Math.round(f/n)};r.valueY=function(){var n=i.intervalY||1;return Math.round(u/n)};r.setValueX=function(n){y(n*i.intervalX,u,!1)};r.setValueY=function(n){y(f,n*i.intervalY,!1)};r.preventDefaultMovement=function(n){g=n}}



//};
}(jQuery));
